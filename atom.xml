<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SorrisoYi</title>
  
  <subtitle>blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://addyzk.github.io/SorrisoYi/"/>
  <updated>2019-05-17T06:51:54.290Z</updated>
  <id>https://addyzk.github.io/SorrisoYi/</id>
  
  <author>
    <name>SorrisoYi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>my</title>
    <link href="https://addyzk.github.io/SorrisoYi/2019/05/17/my/"/>
    <id>https://addyzk.github.io/SorrisoYi/2019/05/17/my/</id>
    <published>2019-05-17T06:50:15.000Z</published>
    <updated>2019-05-17T06:51:54.290Z</updated>
    
    <content type="html"><![CDATA[<p><code>`</code><br>你在哪里</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;`&lt;/code&gt;&lt;br&gt;你在哪里&lt;/p&gt;

      
    
    </summary>
    
      <category term="categories" scheme="https://addyzk.github.io/SorrisoYi/categories/categories/"/>
    
    
      <category term="随笔" scheme="https://addyzk.github.io/SorrisoYi/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hello my friend!</title>
    <link href="https://addyzk.github.io/SorrisoYi/2019/05/16/hello-world/"/>
    <id>https://addyzk.github.io/SorrisoYi/2019/05/16/hello-world/</id>
    <published>2019-05-16T11:43:53.939Z</published>
    <updated>2019-05-17T03:06:43.616Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog ! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="主题文件的使用"><a href="#主题文件的使用" class="headerlink" title="主题文件的使用"></a>主题文件的使用</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">网络编程</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-08</span><span class="bullet">-29</span> <span class="number">20</span><span class="string">:16:19</span></span><br><span class="line"><span class="attr">cover:</span> <span class="attr">https://addyzk.github.io/Random-img/1.jpg</span>      <span class="comment"># 封面图</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">web编程</span>     <span class="comment"># 分类</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">web</span>     <span class="comment"># 标签</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to my blog ! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络编程</title>
    <link href="https://addyzk.github.io/SorrisoYi/2018/08/29/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://addyzk.github.io/SorrisoYi/2018/08/29/网络编程/</id>
    <published>2018-08-29T12:16:19.000Z</published>
    <updated>2019-05-17T02:04:16.376Z</updated>
    
    <content type="html"><![CDATA[<p>计算机之间的通信，三次握手，四次挥手！TCP/UDP协议！</p><h2 id="17-网络编程"><a href="#17-网络编程" class="headerlink" title="17 网络编程"></a>17 网络编程</h2><h2 id="一、网络编程"><a href="#一、网络编程" class="headerlink" title="一、网络编程"></a>一、网络编程</h2><h4 id="1-网络编程基础"><a href="#1-网络编程基础" class="headerlink" title="1.网络编程基础"></a>1.网络编程基础</h4><blockquote><p>计算机网络：把分布在不同区域的计算机通过专门的设备使用通信线路连接起来，从而会形成一个庞大的网络系统，不同的计算机之间就可以进行信息的传递</p><p>网络编程：在同一个网络中不同的机器之间进行通信</p></blockquote><h4 id="2-计算机之间需要通信的条件"><a href="#2-计算机之间需要通信的条件" class="headerlink" title="2.计算机之间需要通信的条件"></a>2.计算机之间需要通信的条件</h4><blockquote><p>三要素：ip地址，端口，协议</p></blockquote><h5 id="2-1-ip地址"><a href="#2-1-ip地址" class="headerlink" title="2.1 ip地址"></a>2.1 ip地址</h5><blockquote><ul><li><p>概念</p><pre><code>互联网地址（Internet Protocol Address），是联网设备和互联网之间的唯一标识，在同一个网段中，ip地址是唯一的ip地址是数字型的，是一个32位整数，通常将其分为4个8位的二进制，每8位用圆点隔开，并且将8位的二进制转换为0~255之间的十进制，例如：10.0.127.108</code></pre></li><li><p>分类</p><pre><code>形式分类：    ipv4:由4个字节组成，分成4段    ipv6:由6个字节组成，分为6段功能分类：    A类：保留给政府机构，1.0.0.1~126.255.255.254    B类：分配给中小型企业，128.1.0.1-191.255.255.254     C类：分配给任何需要的个人，192.0.1.1-223.255.255.254     D类：用于组播【一种数据传输方式】，224.0.0.1-239.255.255.254     E类：用于实验，240....~255.....    127.0.0.1   回送地址，一般指的是本机的ip，localhost，一般用于测试</code></pre></li></ul><p>总结：ip地址可以唯一的确定网络上一个通信实体，但是一个通信实体可以有多个应用程序同时提供网络服务，此时还需要端口</p></blockquote><h5 id="2-2端口"><a href="#2-2端口" class="headerlink" title="2.2端口"></a>2.2端口</h5><blockquote><p>1&gt;概念</p><p>​    数据的发送和接收都需要通过端口出入计算机，端口号是唯一标识通信实体上的应用程序</p><p>​    注意：同一台机器上不能两个程序占用同一个端口，端口号：0~65535</p><p>2&gt;分类</p><p>​    a.公认端口：0~1023   </p><p>​    b.注册端口：1025~49151</p><p>​    c.动态端口或者私有端口：1024~65535</p><p>3&gt;常用的端口</p><p>​    mysql:3306</p><p>​    oracle:1521</p><p>​    tomcat:8080</p><p>​    qq:4000</p></blockquote><h5 id="2-3网络协议"><a href="#2-3网络协议" class="headerlink" title="2.3网络协议"></a>2.3网络协议</h5><blockquote><p>网络协议：只要连接到网络的设备，相互之间遵循同一种网络协议，才能够进行数据交互</p><p><img src="网络模型.gif" alt="网络模型"></p></blockquote><h4 id="3-TCP-IP协议"><a href="#3-TCP-IP协议" class="headerlink" title="3.TCP/IP协议"></a>3.TCP/IP协议</h4><blockquote><p>互联网协议，负责两台计算机之间建立可靠的【保证数据安全到达对方】，可连接【面向连接，三次握手】的通信</p></blockquote><h4 id="4-TCP协议"><a href="#4-TCP协议" class="headerlink" title="4.TCP协议"></a>4.TCP协议</h4><h5 id="4-1概念"><a href="#4-1概念" class="headerlink" title="4.1概念"></a>4.1概念</h5><blockquote><p>Transimission Control Protocol ,传输控制协议，基于字节的传输层通信协议</p><p>特点：</p><p>​    a.安全的【确保接收方完全正确的获取发送方发送的全部数据】</p><p>​    b.面向连接的【数据传输必须要建立连接，连接的过程中需要时间】</p><p>​    c.数据传输的效率较低</p><p>​    d.传输的数据的大小有限制，一旦连接建立，双方可以通过指定的格式发送数据</p><ul><li><p>面向连接：三次握手</p><pre><code>a.客户端向服务端发送一个请求b.服务端收到请求之后，回客户端一个响应c.客户端收到服务端的响应之后，回复给服务端一个确认信息</code></pre></li></ul><p><img src="三次握手.png" alt="三次握手"></p><ul><li>四次挥手    <ul><li>（1） TCP客户端发送一个FIN，用来关闭客户到服务器的数据传送。</li><li>（2） 服务器收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。</li><li>（3） 服务器关闭客户端的连接，发送一个FIN给客户端。</li><li>（4） 客户端发回ACK报文确认，并将确认序号设置为收到序号加1。</li></ul></li></ul><p><img src="四次挥手.png" alt="四次挥手"></p><p>说明：</p><p>​    使用tcp来实现数据的发送和接收需要发送方和接收方，但是两个通信实体之间没有明确的客户端和服务端之分，在两个通信实体建立连接之前，必须有一个通信实体做出主动姿态，被称为客户端</p></blockquote><h5 id="4-2-Socket通信"><a href="#4-2-Socket通信" class="headerlink" title="4.2  Socket通信"></a>4.2  Socket通信</h5><p>​    Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。Socket:套接字，作用：可以发送和接收数据</p><blockquote><p>Socket必须知道目标计算机的ip地址，端口号，指定协议类型【TCP】</p><p><img src="tcp通信.png" alt="tcp通信"></p><p>注意：</p><p>a.同一个端口号，如果被一个socket绑定之后，则其他的socket将不能再绑定</p><p>b.tcp创建连接的是双向通道，谁先发消息，则默认为是客户端，另外一方位服务端</p></blockquote><h4 id="5-UDP协议"><a href="#5-UDP协议" class="headerlink" title="5.UDP协议"></a>5.UDP协议</h4><blockquote><p>User Datagram Protocol,用户数据包协议，提供面向无连接的不可靠的信息传输服务</p><p>特点：</p><p>​    a.不安全【发送方只负责将信息发送出去，数据能不能到达对方，或者到达对方的信息是否正确，都不做任何保证】</p><p>​    b.无连接的【进行信息发送之前，无需进行发送方和接收方之间的连接】</p><p>​    c.速度快</p><p>​    d.大小是有限制的，每个数据包的大小必须限制在64k以内</p><p><img src="udp.png" alt="udp"></p></blockquote><h2 id="二、高阶函数"><a href="#二、高阶函数" class="headerlink" title="二、高阶函数"></a>二、高阶函数</h2><p>如果一个函数的参数是另外一个函数，那么这个函数就可以称为高阶函数</p><h2 id="2-1-map"><a href="#2-1-map" class="headerlink" title="2.1 map"></a>2.1 map</h2><p>map是系统内置函数，map函数接收两个参数，一个是函数，一个是可迭代对象(Iterable)，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">map(function,iterable)</span></span><br><span class="line"><span class="string">参数1：function，函数,函数的参数个数取决于后面序列的个数</span></span><br><span class="line"><span class="string">参数2：iterable，一个序列或多个序列</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">功能：将传入的函数依次作用于序列中的每一个元素，并把结果作为新的Iterator返回</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#1.传入函数一个参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#需求：获取一个列表中每个元素的平方，生成一个新的列表</span></span><br><span class="line">l1 = map(fun,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">print(l1)   <span class="comment">#&lt;map object at 0x000001E86D3DA6D8&gt; #返回的是迭代器</span></span><br><span class="line">print(list(l1))  <span class="comment">#[1, 4, 9, 16]  #将迭代器转换为迭代对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#传入函数2个参数</span></span><br><span class="line">l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">l2 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"><span class="comment">#注意如果两个列表长度不一样，以短的为主计算，函数是平行取值，也就是说x取l1的值，y取l2的值</span></span><br><span class="line">gen1 = map(mul,l1,l2)  <span class="comment">#可以使用lambda表达式</span></span><br><span class="line">print(list(gen1))  <span class="comment">#[2, 6, 12, 20]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取字典的键</span></span><br><span class="line">gen3 = map(<span class="keyword">lambda</span> x:int(x),&#123;<span class="string">'1'</span>:<span class="number">10</span>,<span class="string">'2'</span>:<span class="number">20</span>&#125;)</span><br><span class="line">print(list(gen3)) <span class="comment">#[1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#元组</span></span><br><span class="line">gen4 = map(<span class="keyword">lambda</span> x,y:(x,y),[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(list(gen4))  <span class="comment">#[(1, 1), (2, 2), (3, 3)]</span></span><br></pre></td></tr></table></figure><h2 id="2-2-reduce"><a href="#2-2-reduce" class="headerlink" title="2.2 reduce"></a>2.2 reduce</h2><p>reduce()函数也是functools模块中的一个高阶函数。需要引入functools模块才能使用。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">'''</span><br><span class="line">functools.reduce(f, iterable[, initializer])</span><br><span class="line">参数1：函数，这个函数需要两个参数。</span><br><span class="line">参数2：可迭代对象</span><br><span class="line">参数3：可选，是默认值</span><br><span class="line">返回值：f函数计算的结果</span><br><span class="line">'''</span><br><span class="line">from functools import reduce</span><br><span class="line">#1.累加求和</span><br><span class="line">def add(x,y)</span><br><span class="line"><span class="code">    return x + y</span></span><br><span class="line">print(reduce(f,[1,2,3,4,5],5))</span><br><span class="line">计算过程：</span><br><span class="line"><span class="code"> （1）a = f(1,2)  #将1赋值给x，2赋值给y</span></span><br><span class="line"><span class="code"> （2）a = f(a,3)  #a赋值给x，3赋值给y</span></span><br><span class="line"><span class="code"> （3）a = f(a,4)</span></span><br><span class="line"><span class="code">  (4）a = f(a,5)</span></span><br><span class="line"><span class="code">  (5）f(d,10) = 20</span></span><br><span class="line"></span><br><span class="line">#将序列变成整数</span><br><span class="line">print(reduce(lambda x,y:x*10+y,[9,0,7,8])) #9078</span><br></pre></td></tr></table></figure><h2 id="2-3-filter"><a href="#2-3-filter" class="headerlink" title="2.3 filter"></a>2.3 filter</h2><p>filter是内建函数，可以对可迭代对象进行过滤，去除不满足条件的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">filter(function, iterable) </span><br><span class="line">参数： function 确定是否保留元素，为真保留，为假去除元素,function的值可以<span class="literal">None</span></span><br><span class="line">       iterable 可迭代对象</span><br><span class="line">返回值：一个新的迭代器或迭代对象</span><br><span class="line"><span class="comment">#1 过滤掉非字符串数据</span></span><br><span class="line">print(filter(<span class="keyword">lambda</span> x:isinstance(x,str),[<span class="string">'1'</span>,<span class="number">8</span>,<span class="string">'2'</span>,<span class="number">3</span>,<span class="literal">True</span>,<span class="number">0.9</span>])) </span><br><span class="line">等价于:</span><br><span class="line">  [s <span class="keyword">for</span> s <span class="keyword">in</span> [<span class="string">'1'</span>,<span class="number">8</span>,<span class="string">'2'</span>,<span class="number">3</span>,<span class="literal">True</span>,<span class="number">0.9</span>] <span class="keyword">if</span> isinstance(s,str)]</span><br><span class="line">  </span><br><span class="line"><span class="comment">#2 回文数</span></span><br><span class="line"><span class="comment">#回文数判断</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_palindrome</span><span class="params">(n)</span>:</span></span><br><span class="line">    l1 = list(str(n))  <span class="comment">#将数字转换为字符串，再将字符串转为列表</span></span><br><span class="line">    l2 = l1[::<span class="number">-1</span>] <span class="comment">#获取反向列表</span></span><br><span class="line">    <span class="keyword">if</span> l1 == l2:  <span class="comment">#列表比较,长度相同，每一个元素都相同则为真</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#找出1-1000内所有的回文数</span></span><br><span class="line">print(list(filter(is_palindrome,range(<span class="number">1</span>,<span class="number">1001</span>))))</span><br></pre></td></tr></table></figure><h2 id="2-4-sorted"><a href="#2-4-sorted" class="headerlink" title="2.4 sorted"></a>2.4 sorted</h2><p>sorted是内建函数，用于对有序序列进行排序，生成一个新序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sorted(iterable[, key=<span class="literal">None</span>][, reverse=<span class="literal">False</span>]) </span><br><span class="line">参数：iterable  排序对象，可以列表、元组、字符串等有序序列</span><br><span class="line">      key 一个函数，作用于序列的每一个元素，根据函数返回值进行排序，</span><br><span class="line">           具体的函数的参数就是取自于可迭代对象中，</span><br><span class="line">      reverse 默认从小到大排序，如果reverse为<span class="literal">True</span>则从大到小排序</span><br><span class="line">返回值： 新的序列</span><br><span class="line"><span class="comment">#字符串排序</span></span><br><span class="line">print(sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower)) <span class="comment">#指定把元素变为小写后再排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多维数据排序</span></span><br><span class="line">l=[(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'c'</span>, <span class="number">6</span>), (<span class="string">'d'</span>, <span class="number">4</span>), (<span class="string">'e'</span>, <span class="number">3</span>)]</span><br><span class="line">print(sorted(l,key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>]))  <span class="comment">#使用元组的第二个元素排序</span></span><br><span class="line"></span><br><span class="line">students = [&#123;<span class="string">'name'</span>:<span class="string">'abc'</span>,<span class="string">'gender'</span>:<span class="string">'男'</span>,<span class="string">'age'</span>:<span class="number">23</span>&#125; ,</span><br><span class="line">            &#123;<span class="string">'name'</span>: <span class="string">'kkd'</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>, <span class="string">'age'</span>: <span class="number">19</span>&#125; ,</span><br><span class="line">            &#123;<span class="string">'name'</span>: <span class="string">'ccxsbc'</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;]</span><br><span class="line">print(sorted(students,key=<span class="keyword">lambda</span> elem:elem[<span class="string">'age'</span>]))  <span class="comment">#指定用age排序</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;计算机之间的通信，三次握手，四次挥手！TCP/UDP协议！&lt;/p&gt;
&lt;h2 id=&quot;17-网络编程&quot;&gt;&lt;a href=&quot;#17-网络编程&quot; class=&quot;headerlink&quot; title=&quot;17 网络编程&quot;&gt;&lt;/a&gt;17 网络编程&lt;/h2&gt;&lt;h2 id=&quot;一、网络编程&quot;&gt;
      
    
    </summary>
    
      <category term="web编程" scheme="https://addyzk.github.io/SorrisoYi/categories/web%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="web" scheme="https://addyzk.github.io/SorrisoYi/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Hello Git!</title>
    <link href="https://addyzk.github.io/SorrisoYi/2018/04/23/git/"/>
    <id>https://addyzk.github.io/SorrisoYi/2018/04/23/git/</id>
    <published>2018-04-23T12:11:14.000Z</published>
    <updated>2019-05-17T02:04:02.679Z</updated>
    
    <content type="html"><![CDATA[<p>Git 的基本认识，常用命令，以及使用流程，冲突管理分支管理等。</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="1-git简介"><a href="#1-git简介" class="headerlink" title="1.git简介"></a>1.git简介</h3><p><img src="git.png" alt="image"><br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>workspace 工作区</span><br><span class="line"><span class="bullet">- </span>index 暂存区</span><br><span class="line"><span class="bullet">- </span>repository 本地版本库</span><br><span class="line"><span class="bullet">- </span>remote 远程仓库</span><br></pre></td></tr></table></figure></p><h3 id="2-常用git命令"><a href="#2-常用git命令" class="headerlink" title="2.常用git命令"></a>2.常用git命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所有的git命令必须在工作区内能使用，工作区就是你的项目目录</span><br></pre></td></tr></table></figure><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">   -<span class="ruby"> git --version 查看版本</span></span><br><span class="line"><span class="ruby">   - .gitignore  文件可以过滤不想提交的文件夹或文件</span></span><br><span class="line"><span class="ruby">- git config -l 查看配置信息</span></span><br><span class="line"><span class="ruby">- 修改name和email </span></span><br><span class="line"><span class="ruby">    - git config --global user.name <span class="string">'ddd'</span></span></span><br><span class="line"><span class="ruby">    - git config --global user.email <span class="string">'ddd@jdjdjd.com'</span></span></span><br><span class="line"><span class="ruby">    - git config --global push.default matching</span></span><br><span class="line"><span class="ruby">- 克隆版本库  </span></span><br><span class="line"><span class="ruby">    - git clone 版本库地址     将远端服务上的项目克隆到本地</span></span><br><span class="line"><span class="ruby">- 创建版本库 </span></span><br><span class="line"><span class="ruby">    - git init   初始化一个新的项目 ，必须切换到版本库所在目录 </span></span><br><span class="line"><span class="ruby">- 将文件添加到暂存区</span></span><br><span class="line"><span class="ruby">    - git add 文件名     将指定文件添加到暂存区</span></span><br><span class="line"><span class="ruby">    - git add .          将所有文件添加到暂存区</span></span><br><span class="line"><span class="ruby">    - git reset HEAD &lt;file&gt;  撤销暂存区的修改</span></span><br><span class="line"><span class="ruby">- 查看修改</span></span><br><span class="line"><span class="ruby">    - git diff</span></span><br><span class="line"><span class="ruby">- 提交代码到版本库</span></span><br><span class="line"><span class="ruby">    -  git commit &lt;文件名&gt;    -m <span class="string">"说明信息"</span></span></span><br><span class="line"><span class="ruby">    -  git commit -a -m    提交所有文件</span></span><br><span class="line"><span class="ruby">- 将本地代码推送到远端托管服务器</span></span><br><span class="line"><span class="ruby">    - git push [origin master] 默认推送到主分支</span></span><br><span class="line"><span class="ruby">    - git push origin 分支名     推送到指定分支</span></span><br><span class="line"><span class="ruby">- 从远端服务器拉取内容</span></span><br><span class="line"><span class="ruby">    - git pull origin 分支名</span></span><br><span class="line"><span class="ruby">    - --allow-unrelated-histories  解决本地和远程库不同的问题</span></span><br><span class="line"><span class="ruby">- 删除或恢复文件</span></span><br><span class="line"><span class="ruby">    - git rm &lt;file&gt;  从版本库中删除文件</span></span><br><span class="line"><span class="ruby">    - git checkout -- &lt;file&gt; 从版本库中恢复一个文件</span></span><br><span class="line"><span class="ruby">- 查看版本库状态</span></span><br><span class="line"><span class="ruby">    - git status</span></span><br><span class="line"><span class="ruby">- 查看提交记录</span></span><br><span class="line"><span class="ruby">    - git log</span></span><br><span class="line"><span class="ruby">    - git log --pretty=oneline</span></span><br><span class="line"><span class="ruby">      -版本回退</span></span><br><span class="line"><span class="ruby">    - git reset --hard head~n</span></span><br><span class="line"><span class="ruby">        - head~ 上一个版本</span></span><br><span class="line"><span class="ruby">        - head~~上两个版本</span></span><br><span class="line"><span class="ruby">        - head~n 上n版本</span></span><br><span class="line"><span class="ruby">    - git reset --hard 版本号</span></span><br><span class="line"><span class="ruby">    - git reflog 查看每个版本的版本号</span></span><br></pre></td></tr></table></figure><h3 id="3-git使用流程"><a href="#3-git使用流程" class="headerlink" title="3.git使用流程"></a>3.git使用流程</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 首先到托管服务器上创建一个空版本库，例如在github、coding、oschina等</span></span><br><span class="line"><span class="ruby">- 然后克隆到本地(clone)创建一个新项目</span></span><br><span class="line"><span class="ruby">- 或者可以通过初始化项目创建一个新项目 git init</span></span><br><span class="line"><span class="ruby">    - git remote add origin 远程仓库地址 </span></span><br><span class="line"><span class="ruby">- 添加代码文件（git add)</span></span><br><span class="line"><span class="ruby">- 提交代码到本地库 git commit -m</span></span><br><span class="line"><span class="ruby">- 将代码推送到远端服务器 git push</span></span><br><span class="line"><span class="ruby">- 从远端服务器拉取代码git  pull</span></span><br></pre></td></tr></table></figure><h4 id="4-冲突管理"><a href="#4-冲突管理" class="headerlink" title="4 冲突管理"></a>4 冲突管理</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>如果有多个人同时修改同一个文件的相同行，在推送时会有冲突</span><br><span class="line"><span class="bullet">- </span>发生冲突后，首先将服务器端代码拉到本地（pull），手动合并冲突</span><br><span class="line"><span class="bullet">- </span>然后添加修改后的代码文件，重新提交</span><br><span class="line"><span class="bullet">- </span>将代码推送到服务器</span><br></pre></td></tr></table></figure><h4 id="5-分支管理"><a href="#5-分支管理" class="headerlink" title="5 分支管理"></a>5 分支管理</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> master 主分支，记录发布版本</span></span><br><span class="line"><span class="ruby">- online 线上分支 正在运行的版本</span></span><br><span class="line"><span class="ruby">- develop 开发分支 用于测试</span></span><br><span class="line"><span class="ruby">- local 本地分支</span></span><br><span class="line"><span class="ruby">- 分支管理常用命令</span></span><br><span class="line"><span class="ruby">    - git branch 查看分支</span></span><br><span class="line"><span class="ruby">    - git branch 新分支 [旧分支]    基于旧分支创建新分支</span></span><br><span class="line"><span class="ruby">    - git branch -d 分支名      删除分支</span></span><br><span class="line"><span class="ruby">    - git checkout 分支           切换到指定分支</span></span><br><span class="line"><span class="ruby">    - git merge 分支名            将指定分支合并到当前分支</span></span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 忽略提交，在工作区中编写一个.gitignore文件，在文件中记录不需要提交的目录和文件</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">- 如果克隆的时候出现了： unable to access <span class="string">'https://git.coding.net/landmark/php1702.git/'</span>: error setting certificate 解决方式：</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">    - Git config --global http.sslVerify <span class="literal">false</span> </span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">- 免密提交</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">    - <span class="number">1</span> 生成公钥对</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">        ~~~</span></span><br><span class="line"><span class="ruby">        cd   <span class="comment">#回到家目录</span></span></span><br><span class="line"><span class="ruby">        ssh-keygen -t rsa -C <span class="string">"自己的邮箱"</span></span></span><br><span class="line"><span class="ruby">        id_rsa 私钥  id_rsa.pub 公钥</span></span><br><span class="line"><span class="ruby">        ~~~</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">        </span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">    - <span class="number">2</span> 将公钥添加到码云服务器上</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">        ~~~</span></span><br><span class="line"><span class="ruby">        复制id_rsa.pub的内容</span></span><br><span class="line"><span class="ruby">        码云 ----&gt; 个人设置--&gt;ssh公钥，将复制的内容黏贴到“公钥内容”中</span></span><br><span class="line"><span class="ruby">        选中永久有效</span></span><br><span class="line"><span class="ruby">        添加</span></span><br><span class="line"><span class="ruby">        ~~~</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">    - <span class="number">3</span>.测试连接</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">        ~~~</span></span><br><span class="line"><span class="ruby">        ssh -T git@git.coding.net</span></span><br><span class="line"><span class="ruby">        </span></span><br><span class="line"><span class="ruby">        python@ubuntu<span class="symbol">:~/</span>.ssh$ ssh -T git@git.coding.net</span></span><br><span class="line"><span class="ruby">        <span class="symbol">Warning:</span> Permanently added the RSA host key <span class="keyword">for</span> IP address <span class="string">'123.59.83.79'</span> to the list of known hosts.</span></span><br><span class="line"><span class="ruby">        Coding 提示: Hello landmark, You<span class="string">'ve connected to Coding.net via SSH. This is a personal key.</span></span></span><br><span class="line"><span class="ruby">        landmark，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥 <span class="comment"># 表示通过</span></span></span><br><span class="line"><span class="ruby">        ~~~</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">        </span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">    - <span class="number">4</span> 使用项目的ssh地址，可以clone或init/remote add</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Git 的基本认识，常用命令，以及使用流程，冲突管理分支管理等。&lt;/p&gt;
&lt;h2 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h2&gt;&lt;h3 id=&quot;1-git简介&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
      <category term="git" scheme="https://addyzk.github.io/SorrisoYi/categories/git/"/>
    
    
      <category term="Git" scheme="https://addyzk.github.io/SorrisoYi/tags/Git/"/>
    
  </entry>
  
</feed>

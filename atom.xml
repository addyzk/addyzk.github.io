<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SorrisoYi</title>
  
  <subtitle>blog</subtitle>
  <link href="/SorrisiYi/atom.xml" rel="self"/>
  
  <link href="https://addyzk.github.io/"/>
  <updated>2019-05-17T03:06:43.616Z</updated>
  <id>https://addyzk.github.io/</id>
  
  <author>
    <name>SorrisoYi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello my friend!</title>
    <link href="https://addyzk.github.io/2019/05/16/hello-world/"/>
    <id>https://addyzk.github.io/2019/05/16/hello-world/</id>
    <published>2019-05-16T11:43:53.939Z</published>
    <updated>2019-05-17T03:06:43.616Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/SorrisiYi/assets/css/APlayer.min.css"><script src="/SorrisiYi/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to my blog ! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="主题文件的使用"><a href="#主题文件的使用" class="headerlink" title="主题文件的使用"></a>主题文件的使用</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">网络编程</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-08</span><span class="bullet">-29</span> <span class="number">20</span><span class="string">:16:19</span></span><br><span class="line"><span class="attr">cover:</span> <span class="attr">https://addyzk.github.io/Random-img/1.jpg</span>      <span class="comment"># 封面图</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">web编程</span>     <span class="comment"># 分类</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">web</span>     <span class="comment"># 标签</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/SorrisiYi/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/SorrisiYi/assets/js
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python进阶</title>
    <link href="https://addyzk.github.io/2019/04/18/Python%E8%BF%9B%E9%98%B6/"/>
    <id>https://addyzk.github.io/2019/04/18/Python进阶/</id>
    <published>2019-04-18T09:01:34.000Z</published>
    <updated>2019-05-18T09:26:16.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/SorrisiYi/assets/css/APlayer.min.css"><script src="/SorrisiYi/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python-进阶"><a href="#Python-进阶" class="headerlink" title="Python 进阶"></a>Python 进阶</h1><h4 id="1-PEP8-编码规范-及开发中的一些惯例和建议"><a href="#1-PEP8-编码规范-及开发中的一些惯例和建议" class="headerlink" title="1. PEP8 编码规范, 及开发中的一些惯例和建议"></a>1. PEP8 编码规范, 及开发中的一些惯例和建议</h4><p>练习: 规范化这段代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> user.models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line">mod=<span class="number">0xffffffff</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>  <span class="params">( a , b = <span class="number">123</span> )</span>:</span></span><br><span class="line">    c=&#123; <span class="string">'x'</span> : <span class="number">111</span> , <span class="string">'y'</span> : <span class="number">222</span> &#125;<span class="comment">#定义一个字典</span></span><br><span class="line">    d=[ <span class="number">1</span> , <span class="number">3</span>,<span class="number">5</span> ]</span><br><span class="line">    <span class="keyword">return</span> a,b , c</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span> : <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>为什么要有编码规范</p><p>编码是给人看的还是给机器看的？</p><p>美观是重点吗？</p><ol><li>美观</li><li>可读性</li><li>可维护性</li><li>健壮性</li></ol><p>团队内最好的代码状态: 所有人写出的代码像一个人写出来的</p><p>代码编排:</p><ul><li>缩进 4 个空格, 禁止空格与 Tab 混用</li><li>行长 80 字符: 防止单行逻辑过于复杂</li></ul><p><code>import</code></p><ul><li>不要使用 <code>from xxx import *</code></li><li>顺序<ol><li>标准库</li><li>第三方库</li><li>自定义库</li></ol></li><li>单行不要 import 多个库</li><li>模块内用不到的不要去 import</li></ul><p>空格</p><ul><li><code>: ,</code> 后面跟一个空格, 前面无空格 (行尾分号后无空格)</li><li>二元操作符前后各一个空格, 包括以下几类:<ol><li>数学运算符: <code>+ - * / // = &amp; |</code></li><li>比较运算符: <code>== != &gt; &lt;  &gt;= &lt;= is not in</code></li><li>逻辑运算符: <code>and or not</code></li><li>位运算符: <code>&amp; | ^ &lt;&lt; &gt;&gt;</code></li><li>当 <code>=</code> 用于指示关键字参数或默认参数值时, 不要在其两侧使用空格</li></ol></li></ul><p>适当添加空行</p><ul><li>函数间: 顶级函数间空 2 行, 类的方法之间空 1 行</li><li>函数内: 同一函数内的逻辑块之间, 空 1 行</li><li>文件结尾: 留一个空行 (Unix 中 \n 是文件的结束符)</li></ul><p>注释</p><ul><li><strong>忌</strong>: 逐行添加注释, 没有一个注释</li><li>行尾注释: 单行逻辑过于复杂时添加</li><li>块注释: 一段逻辑开始时添加</li><li>引入外来算法或者配置时须在注释中添加源连接, 标明出处</li><li>函数、类、模块尽可能添加 <code>docstring</code>      “””   string  “””</li></ul><p>命名</p><ul><li>好的变量名要能做到“词能达意”  见名知意</li><li>除非在 lambda 函数中, 否则不要用 <strong>单字母</strong> 的变量名 (即使是 lambda 函数中的变量名也应该尽可能的有意义)</li><li>包名、模块名、函数名、方法、普通变量名全部使用小写, 单词间用下划线连接 </li><li>类名、异常名使用 CapWords (首字母大写) 的方式, 异常名结尾加 <code>Error</code> 或 <code>Wraning</code> 后缀</li><li>全局变量尽量使用大写, 一组同类型的全局变量要加上统一前缀, 单词用下划线连接</li><li>函数名必须有动词, 最好是 do_something 的句式, 或者 somebody_do_something 句式</li></ul><p>语意明确、直白</p><ul><li><code>not xx in yy</code> <em>VS</em> <code>xx not in yy</code></li><li><code>not a is b</code> <em>VS</em> <code>a is not b</code></li></ul><p>程序的构建</p><ul><li>函数是模块化思想的体现</li><li>独立的逻辑应该抽离成独立函数，让代码结构更清晰，可复用度更高</li><li><strong>一个函数只做一件事情, 并把这件事做好</strong></li><li><strong>大的功能用小函数之间灵活组合来完成</strong></li><li>避免编写庞大的程序, <strong>“大” 意味着体积庞大, 逻辑复杂甚至混乱</strong></li></ul><p>自定义的变量名、函数名不要与标准库中的名字冲突 </p><p><code>pip install pycodestyle pylint flake8 autopep8</code></p><h4 id="2-和-的用法"><a href="#2-和-的用法" class="headerlink" title="2. * 和 ** 的用法"></a>2. * 和 ** 的用法</h4><p>函数定义时接收不定长参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>参数传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y,*,z, a, b)</span>:</span>      <span class="comment"># 此处的*  表示后面的参数必须都是关键字参数</span></span><br><span class="line">    print(x) </span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">dic = &#123;<span class="string">'a'</span>: <span class="number">22</span>, <span class="string">'b'</span>: <span class="number">77</span>&#125;</span><br><span class="line">foo(*lst, **dic)       <span class="comment"># *列表  **字典   解包</span></span><br></pre></td></tr></table></figure><p>import * 语法</p><p>文件 xyz.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__all__ = (<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'_d'</span>)     <span class="comment"># 指明导包的时候只能倒入  a,e,_d</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">123</span></span><br><span class="line">_b = <span class="number">456</span>                      <span class="comment"># 加了下划线不会被导入</span></span><br><span class="line">c = <span class="string">'asdfghjkl'</span></span><br><span class="line">_d = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">e = (<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>文件abc.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xyz <span class="keyword">import</span> *      <span class="comment"># 只导入了 a,e,_d</span></span><br><span class="line">print(a)</span><br><span class="line">print(_b)</span><br><span class="line">print(c)</span><br><span class="line">print(_d)</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><h4 id="3-Python-的赋值和引用"><a href="#3-Python-的赋值和引用" class="headerlink" title="3. Python 的赋值和引用"></a>3. Python 的赋值和引用</h4><p><code>==, is</code>: <code>==</code> 判断的是值, <code>is</code> 判断的是内存地址 (即对象的id)</p><p>小整数对象: [-5, 256]            # 性能优化   小整数对象内存地址都是一样的，is返回True，大整数  is  返回 false</p><p><code>copy, deepcopy</code> 的区别</p><p><code>copy</code>: 只拷贝表层元素</p><p><code>deepcopy</code>: 在内存中重新创建所有子元素</p><p><img src="copy.png" alt="copy and deepcopy"></p><p>练习1: 说出执行结果</p><p><img src="default_list.png" alt="default list"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extendList</span><span class="params">(val, lst=[])</span>:</span></span><br><span class="line">    lst.append(val)</span><br><span class="line">    <span class="keyword">return</span> lst</span><br><span class="line"></span><br><span class="line">list1 = extendList(<span class="number">10</span>)      <span class="comment"># [10]</span></span><br><span class="line">list2 = extendList(<span class="number">123</span>, [])     <span class="comment"># [123]      # []  覆盖了</span></span><br><span class="line">list3 = extendList(<span class="string">'a'</span>)         <span class="comment"># [10,'a']</span></span><br></pre></td></tr></table></figure><p>练习2: 说出下面执行结果</p><p><img src="copy_deepcopy.png" alt="copy deepcopy"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> copy, deepcopy</span><br><span class="line"><span class="keyword">from</span> pickle <span class="keyword">import</span> dumps, loads</span><br><span class="line"></span><br><span class="line">a = [<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>]</span><br><span class="line">b = [a] * <span class="number">3</span> <span class="comment"># [['x','y','z'], ['x','y','z'], ['x','y','z']]     # 三个地址都指向a</span></span><br><span class="line">c = copy(b)</span><br><span class="line">d = deepcopy(b)</span><br><span class="line">e = loads(dumps(b, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">b[<span class="number">1</span>].append(<span class="number">999</span>)      <span class="comment"># [['x','y','z',999], ['x','y','z',999], ['x','y','z',999]]</span></span><br><span class="line">b.append(<span class="number">777</span>)</span><br><span class="line"></span><br><span class="line">c[<span class="number">1</span>].append(<span class="number">999</span>)</span><br><span class="line">c.append(<span class="number">555</span>)</span><br><span class="line"></span><br><span class="line">d[<span class="number">1</span>].append(<span class="number">999</span>)</span><br><span class="line">d.append(<span class="number">333</span>)</span><br><span class="line"></span><br><span class="line">e[<span class="number">1</span>].append(<span class="number">999</span>)</span><br><span class="line">e.append(<span class="number">111</span>)</span><br></pre></td></tr></table></figure><p>自定义 deepcopy: <code>my_deepcopy = lambda item: loads(dumps(item, 4))</code></p><p>dumps  对象序列化    loads   加载，  dumps(item, 4)   4表示协议，协议（1，2，3，4）越高，序列化速度越快</p><h4 id="4-迭代器-生成器"><a href="#4-迭代器-生成器" class="headerlink" title="4. 迭代器, 生成器"></a>4. 迭代器, 生成器</h4><p>练习: 说出如下代码的打印结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>   print(<span class="number">111</span>)</span><br><span class="line"><span class="meta">... </span>   <span class="keyword">yield</span> <span class="number">222</span></span><br><span class="line"><span class="meta">... </span>   print(<span class="number">333</span>)</span><br><span class="line"><span class="meta">... </span>   <span class="keyword">yield</span> <span class="number">444</span></span><br><span class="line"><span class="meta">... </span>   print(<span class="number">555</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = foo()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(n)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(n)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(n)</span><br></pre></td></tr></table></figure><p>generator: 生成器是一种特殊的迭代器, 不需要自定义 <code>__iter__</code> 和 <code>__next__</code></p><ul><li>生成器函数 (yield)</li><li>生成器表达式      ((i  for   i  in range(10))      生成器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Range</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start, end=None, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> end <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.end = start</span><br><span class="line">            self.start = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.start = start</span><br><span class="line">            self.end = end</span><br><span class="line">        self.step = step</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.start &lt; self.end:</span><br><span class="line">            current = self.start</span><br><span class="line">            self.start += self.step</span><br><span class="line">            <span class="keyword">return</span> current</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br></pre></td></tr></table></figure><p>iterator: 任何实现了 <code>__iter__</code> 和 <code>__next__</code> 方法的对象都是迭代器.</p><p><code>__iter__</code> 得到一个迭代器。迭代器的<code>__iter__()</code>返回自身</p><p><code>__next__</code> 返回迭代器下一个值</p><p>如果容器中没有更多元素, 则抛出 StopIteration 异常</p><p>Python2中没有 <code>__next__()</code>, 而是 <code>next()</code></p><p>可迭代对象是指实现了<code>__iter__</code>方法，没有实现<code>__next__</code>方法</p><p><code>str / bytes / list / tuple / dict / set</code> 自身不是迭代器，他们自身不具备 <code>__next__()</code>, 但是具有 <code>__iter__()</code>, <code>__iter__()</code> 方法用来把自身转换成一个迭代器</p><p>练习1: 定义一个随机数迭代器, 随机范围为 [1, 50], 最大迭代次数 30</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomIter</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start, end, times)</span>:</span></span><br><span class="line">        self.start = start</span><br><span class="line">        self.end = end</span><br><span class="line">        self.count = times</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.count -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.count &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> random.randint(self.start, self.end)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br></pre></td></tr></table></figure><p>练习2: 自定义一个迭代器, 实现斐波那契数列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, max_value)</span>:</span></span><br><span class="line">        self.prev = <span class="number">0</span></span><br><span class="line">        self.curr = <span class="number">1</span></span><br><span class="line">        self.max_value = max_value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.curr &lt;= self.max_value:</span><br><span class="line">            res = self.curr</span><br><span class="line">            self.prev, self.curr = self.curr, self.prev + self.curr  <span class="comment"># 为下一次做准备</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br></pre></td></tr></table></figure><p>练习3: 自定义一个生成器函数, 实现斐波那契数列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max_value)</span>:</span></span><br><span class="line">    prev = <span class="number">0</span></span><br><span class="line">    curr = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> curr &lt; max_value:</span><br><span class="line">        <span class="keyword">yield</span> curr</span><br><span class="line">        prev, curr = curr, curr + prev</span><br></pre></td></tr></table></figure><p>迭代器、生成器有什么好处？</p><ul><li>节省内存</li><li>惰性求值 （惰性求值思想来自于 Lisp 语言） </li></ul><p>各种推导式</p><ul><li>分三部分：生成值的表达式, 循环主体, 过滤条件表达式</li><li>列表: <code>[i * 3 for i in range(5) if i % 2 == 0]</code></li><li>字典: <code>{i: i + 3 for i in range(5)}</code></li><li>集合: <code>{i for i in range(5)}</code></li></ul><h4 id="5-装饰器-AOP编程思想，-面向切面编程"><a href="#5-装饰器-AOP编程思想，-面向切面编程" class="headerlink" title="5. 装饰器      AOP编程思想， 面向切面编程"></a>5. 装饰器      AOP编程思想， 面向切面编程</h4><p>最简装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco_outter</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">        @wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrap</span><br><span class="line">    <span class="keyword">return</span> deco</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco(10)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a ** b</span><br></pre></td></tr></table></figure><p>原理</p><p>对比被装饰前后的 <code>foo.__name__</code> 和 <code>foo.__doc__</code></p><p>装饰器改变了原函数的doctoring和name    使用wraps装饰器解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">'''i am deco'''</span></span><br><span class="line"><span class="meta">    @wraps(func)  # 还原被装饰器修改的原函数属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">'''i am wrap'''</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrap</span><br></pre></td></tr></table></figure><p>简单过程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fn = deco(func)</span><br><span class="line">foo = fn</span><br><span class="line">foo(*args, **kwargs)</span><br></pre></td></tr></table></figure><p>多个装饰器叠加调用的过程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@deco1</span></span><br><span class="line"><span class="meta">@deco2</span></span><br><span class="line"><span class="meta">@deco3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过程拆解 1</span></span><br><span class="line">fn3 = deco3(foo)</span><br><span class="line">fn2 = deco2(fn3)</span><br><span class="line">fn1 = deco1(fn2)</span><br><span class="line">foo = fn1</span><br><span class="line">foo(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过程拆解 2</span></span><br><span class="line"><span class="comment"># 单行: deco1( deco2( deco3(foo) ) )(3, 2)</span></span><br><span class="line">deco1(</span><br><span class="line">    deco2(</span><br><span class="line">        deco3(foo)</span><br><span class="line">    )</span><br><span class="line">)(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>带参数的装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrap1</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrap2</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrap2</span><br><span class="line">    <span class="keyword">return</span> wrap1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用过程</span></span><br><span class="line">wrap1 = deco(n)</span><br><span class="line">wrap2 = wrap1(foo)</span><br><span class="line">foo = wrap2</span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单行形式</span></span><br><span class="line">check_result(<span class="number">30</span>)(foo)(<span class="number">4</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>装饰器类和 <code>__call__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deco</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过程拆解</span></span><br><span class="line">fn = Deco(foo)</span><br><span class="line">foo = fn</span><br><span class="line">foo(<span class="number">12</span>, <span class="number">34</span>)</span><br></pre></td></tr></table></figure><p>使用场景</p><ul><li>参数、结果检查</li><li>缓存、计数</li><li>日志、统计</li><li>权限管理</li><li>重试</li><li>其他</li></ul><p>练习1: 写一个 timer 装饰器, 计算出被装饰函数调用一次花多长时间, 并把时间打印出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)  # 修正 docstring</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        time0 = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        time1 = time.time()</span><br><span class="line">        print(time1 - time0)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrap</span><br></pre></td></tr></table></figure><p>练习2: 写一个 Retry 装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">retry</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, max_retries=<span class="number">3</span>, wait=<span class="number">0</span>, exceptions=<span class="params">(Exception,)</span>)</span>:</span></span><br><span class="line">        self.max_retries = max_retries</span><br><span class="line">        self.exceptions = exceptions</span><br><span class="line">        self.wait = wait</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(self.max_retries + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    result = func(*args, **kwargs)</span><br><span class="line">                <span class="keyword">except</span> self.exceptions:</span><br><span class="line">                    time.sleep(self.wait)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><h4 id="6-函数闭包"><a href="#6-函数闭包" class="headerlink" title="6. 函数闭包"></a>6. 函数闭包</h4><p>Function Closure: 引用了自由变量的函数即是一个闭包. 这个被引用的自由变量和这个函数一同存在, 即使已经离开了创造它的环境也不例外.</p><p>说出下面函数返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    l = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(i)</span>:</span></span><br><span class="line">        l.append(i)</span><br><span class="line">        <span class="keyword">return</span> l</span><br><span class="line">    <span class="keyword">return</span> bar</span><br><span class="line"></span><br><span class="line">f1 = foo()</span><br><span class="line">f2 = foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说出下列语句执行结果</span></span><br><span class="line">f1(<span class="number">1</span>)        <span class="comment"># l = [1]</span></span><br><span class="line">f1(<span class="number">2</span>)        <span class="comment"># l = [1,2]</span></span><br><span class="line">f2(<span class="number">3</span>)        <span class="comment"># l = [3]</span></span><br></pre></td></tr></table></figure><p>深入一点: <code>object.__closure__</code>   （对象，）    <code>list_cell, = object.__closure__</code> 解包 </p><p><code>object.cell_contents</code> 返回闭包中自由变量的值</p><p>作用域</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">┌───────────────────────────┐</span><br><span class="line">│ built-<span class="keyword">in</span> <span class="keyword">namespace</span>        │</span><br><span class="line">├───────────────────────────┤  ↑</span><br><span class="line">│ <span class="keyword">global</span> <span class="keyword">namespace</span>          │</span><br><span class="line">│   ┌───────────────────────┤</span><br><span class="line">│   │ local <span class="keyword">namespace</span>       │  n = <span class="number">123</span></span><br><span class="line">│   │   ┌───────────────────┤</span><br><span class="line">│   │   │ local <span class="keyword">namespace</span>   │  ↑</span><br><span class="line">│   │   │   ┌───────────────┤</span><br><span class="line">│   │   │   │ ...           │  <span class="keyword">print</span>(n)</span><br><span class="line">└───┴───┴───┴───────────────┘</span><br></pre></td></tr></table></figure><p>声明全局变量: <code>global</code></p><p>声明非本层的 <strong>局部变量</strong> : <code>nonlocal</code></p><p>查看全局变量: <code>globals()</code></p><ul><li>查看局部变量: <code>locals()</code><ul><li>查看变量: <code>vars([object])  # 不传参数相当于 locals(), 传入对象后, 会得到 object.__dict__</code></li></ul></li></ul><h4 id="7-类方法和静态方法"><a href="#7-类方法和静态方法" class="headerlink" title="7. 类方法和静态方法"></a>7. 类方法和静态方法</h4><p><code>method</code> 普通方法</p><ul><li>通过实例调用</li><li>可以引用类内部的<strong>任何属性和方法</strong></li><li>第一个参数是self，代表实例对象本身</li></ul><p><code>classmethod</code></p><ul><li>无需实例化，实例对象和类名都可以调用</li><li>可以调用类属性和类方法</li><li>无法取到普通的成员属性和方法</li><li>第一个参数是cls,表示类本身</li></ul><p><code>staticmethod</code></p><ul><li>无需实例化</li><li><strong>无法</strong>取到类内部的任何属性和方法, 完全独立的一个方法</li><li>无需传任何参数</li></ul><p>练习: 说出下面代码的运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    x = <span class="number">123</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.y = <span class="number">456</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'i am a method'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar2</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">'i am a classmethod'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar3</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'i am a staticmethod'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.x)</span><br><span class="line">        print(self.y)</span><br><span class="line">        self.bar1()       <span class="comment"># 可以</span></span><br><span class="line">        self.bar2()       <span class="comment"># 可以</span></span><br><span class="line">        self.bar3()       <span class="comment"># 可以</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo2</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(cls.x)</span><br><span class="line">        print(cls.y) <span class="comment"># 会报错  y是实例属性，不能被类方法调用</span></span><br><span class="line">        cls.bar1() <span class="comment"># 会报错,因为bar1是实例方法. 得通过self.bar1</span></span><br><span class="line">        cls.bar2()       <span class="comment"># 可以</span></span><br><span class="line">        cls.bar3()       <span class="comment"># 可以</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo3</span><span class="params">(obj)</span>:</span></span><br><span class="line">        print(obj.x)</span><br><span class="line">        print(obj.y)</span><br><span class="line">        obj.bar1()</span><br><span class="line">        obj.bar2()</span><br><span class="line">        obj.bar3()</span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t.foo1()</span><br><span class="line">t.foo2()</span><br><span class="line">t.foo3()                <span class="comment"># 传t进去就可以</span></span><br></pre></td></tr></table></figure><h4 id="8-继承相关问题"><a href="#8-继承相关问题" class="headerlink" title="8. 继承相关问题"></a>8. 继承相关问题</h4><p>什么是多态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'animal running'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lion</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'lion running'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tiger</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'tiger running'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LionTiger</span><span class="params">(Lion, Tiger)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">cub = LionTiger()</span><br><span class="line">cub.run()           <span class="comment"># lion running</span></span><br><span class="line">isinstance(cub, Lion)      <span class="comment"># true</span></span><br><span class="line">isinstance(cub, Tiger)     <span class="comment"># true    一个对象可以是多个类，就是多态</span></span><br></pre></td></tr></table></figure><p>多继承</p><p>方法和属性的继承顺序: <code>Cls.mro()</code>  继承链</p><p>菱形继承问题</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">继承关系示意</span><br><span class="line">菱形继承</span><br><span class="line">     A.foo<span class="comment">()</span></span><br><span class="line">   /   \</span><br><span class="line">  B     C.foo<span class="comment">()</span></span><br><span class="line">   \   /</span><br><span class="line">     D.mro<span class="comment">()</span>  <span class="attr"># 方法的继承顺序，由 C3</span> 算法得到</span><br></pre></td></tr></table></figure><p>Mixin: 通过单纯的 mixin 类完成功能组合</p><p>super 会根据执行链去调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'enter A'</span>)</span><br><span class="line">        self.x = <span class="number">111</span></span><br><span class="line">        print(<span class="string">'exit A'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'enter B'</span>)</span><br><span class="line">        self.y = <span class="number">222</span></span><br><span class="line">        A.__init__(self)      <span class="comment"># 执行父类方法不推荐使用。推荐使用super()</span></span><br><span class="line">        <span class="comment"># super().__init__()</span></span><br><span class="line">        print(<span class="string">'exit B'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'enter C'</span>)</span><br><span class="line">        self.z = <span class="number">333</span></span><br><span class="line">        A.__init__(self)</span><br><span class="line">        <span class="comment"># super().__init__()</span></span><br><span class="line">        print(<span class="string">'exit C'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'enter D'</span>)</span><br><span class="line">        B.__init__(self)</span><br><span class="line">        C.__init__(self)</span><br><span class="line">        <span class="comment"># super().__init__()         # super只执行一次A方法</span></span><br><span class="line">        print(<span class="string">'exit D'</span>)</span><br><span class="line"></span><br><span class="line">d = D()</span><br></pre></td></tr></table></figure><h4 id="9-垃圾收集-GC-引用计数，标记清除，分代收集"><a href="#9-垃圾收集-GC-引用计数，标记清除，分代收集" class="headerlink" title="9. 垃圾收集 (GC)            引用计数，标记清除，分代收集"></a>9. 垃圾收集 (GC)            引用计数，标记清除，分代收集</h4><p>Garbage Collection (GC)</p><p>引用计数</p><p>优点: 简单、实时性高</p><p><img src="gc1.png" alt="GC">  ==&gt;  <img src="gc2.png" alt="GC"></p><p>缺点: 消耗资源、循环引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lst1 = [<span class="number">3</span>, <span class="number">4</span>]           <span class="comment"># lst1-&gt;ref_count 1</span></span><br><span class="line">lst2 = [<span class="number">8</span>, <span class="number">9</span>]           <span class="comment"># lst2-&gt;ref_count 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lst1 -&gt; [3, 4, lst2]</span></span><br><span class="line">lst1.append(lst2)       <span class="comment"># lst2-&gt;ref_count 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lst2 -&gt; [8, 9, lst1]</span></span><br><span class="line">lst2.append(lst1)       <span class="comment"># lst1-&gt;ref_count 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> lst1                <span class="comment"># lst1-&gt;ref_count 1</span></span><br><span class="line"><span class="keyword">del</span> lst2                <span class="comment"># lst2-&gt;ref_count 1</span></span><br></pre></td></tr></table></figure><p><img src="ref_loop.jpg" alt="ref_loop"></p><p>标记-清除, 分代收集（老，中，新）        # 循环引用的话引用计数没法清除，使用标记清除（链表）</p><p>用来回收引用计数无法清除的内存</p><h4 id="10-Python-魔术方法"><a href="#10-Python-魔术方法" class="headerlink" title="10. Python 魔术方法"></a>10. Python 魔术方法</h4><p><code>__str__</code> 格式化输出对象     print 的时候调用</p><p><code>__repr__</code>   实现此方法，则可以用<code>__str__</code>方法中的内容代替对象本身</p><p><code>__init__</code> 和 <code>__new__</code></p><ul><li><code>__new__</code> 创建一个实例，并返回类的实例</li><li><code>__init__</code> 初始化实例，无返回值</li><li><p><code>__new__</code> 是一个特殊的类方法,不需要使用@classmethod来装饰.</p><ul><li>单例模式          或者  利用python模块的唯一属性，新建一个py文件，实例化一个类，导包就可以  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''单例模式'''</span></span><br><span class="line">    obj = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls.obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.obj = object.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.obj</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>数学运算、比较运算</p><ul><li><p>运算符重载</p><ul><li><code>+</code>: <code>__add__(value)</code></li><li><code>-</code>: <code>__sub__(value)</code>   substract</li><li><code>*</code>: <code>__mul__(value)</code>   mulply</li><li><code>/</code>: <code>__truediv__(value)</code> (Python 3.x), <code>__div__(value)</code> (Python 2.x)  divide</li><li><code>//</code>: <code>__floordiv__(value)</code></li><li><code>%</code>: <code>__mod__(value)</code></li><li><code>&amp;</code>: <code>__and__(value)</code></li><li><code>|</code>: <code>__or__(value)</code></li></ul></li><li><p>练习: 实现字典的 <code>__add__</code> 方法, 作用相当于 d.update(other)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dict</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(other, dict):</span><br><span class="line">            new_dict = &#123;&#125;</span><br><span class="line">            new_dict.update(self)</span><br><span class="line">            new_dict.update(other)</span><br><span class="line">            <span class="keyword">return</span> new_dict</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'not a dict'</span>)</span><br></pre></td></tr></table></figure></li><li><p>比较运算符的重载</p><ul><li><code>==</code>: <code>__eq__(value)</code> </li><li><code>!=</code>: <code>__ne__(value)</code>  </li><li><code>&gt;</code>: <code>__gt__(value)</code></li><li><code>&gt;=</code>: <code>__ge__(value)</code></li><li><code>&lt;</code>: <code>__lt__(value)</code></li><li><code>&lt;=</code>: <code>__le__(value)</code></li></ul></li><li><p>练习: 完成一个类, 实现数学上无穷大的概念      应该写成一个单例，实例化两个对象后会出现矛盾</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inf</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__le__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ge__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ne__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></li></ul><ol><li><p>容器方法</p><p> <code>__len__</code> -&gt; len</p><p> <code>__iter__</code> -&gt; for</p><p> <code>__contains__</code> -&gt; in</p><p> <code>__getitem__</code> 对 <code>string, bytes, list, tuple, dict</code> 有效</p><p> <code>__setitem__</code> 对 <code>list, dict</code> 有效</p><p> <code>__missing__</code> 对 dict 有效, 字典的预留接口, dict 本身并没有实现 </p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dict</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self[key] = <span class="literal">None</span> <span class="comment"># 当检查到 Key 缺失时, 可以做任何默认行为</span></span><br></pre></td></tr></table></figure></li><li><p>可执行对象: <code>__call__</code></p></li><li><p>上下文管理 with:</p><p> <code>__enter__</code> 进入 <code>with</code> 代码块前的准备操作</p><p> <code>__exit__</code> 退出时的善后操作</p><p> 文件对象、线程锁、socket 对象 等 都可以使用 with 操作</p><p> 示例</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, Error, error, traceback)</span>:</span></span><br><span class="line">        print(Error, error, traceback)</span><br></pre></td></tr></table></figure></li><li><p>python的自省<code>__setattr__, __getattribute__, __getattr__, __dict__</code></p><p> 内建函数：<code>setattr(), getattr(), hasattr()</code>  python的内省.</p><p> 常用来做属性监听</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="string">'''TestClass'''</span></span><br><span class="line">    z = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.money = <span class="number">10000</span></span><br><span class="line">        self.y = <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span>        <span class="comment"># setattr()设置实例属性</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">'money'</span> <span class="keyword">and</span> value &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'money &lt; 0'</span>)</span><br><span class="line">        print(<span class="string">'set %s to %s'</span> % (name, value))</span><br><span class="line">        object.__setattr__(self, name, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, name)</span>:</span>   <span class="comment"># getattr()获取属性 第三个参数返回默认值，不再报错</span></span><br><span class="line">        print(<span class="string">'get %s'</span> % name)</span><br><span class="line">        <span class="keyword">return</span> object.__getattribute__(self, name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span>        <span class="comment"># 当拿不到属性的时候，调用此方法</span></span><br><span class="line">        print(<span class="string">'not has %s'</span> % name)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span> <span class="comment"># hasattr()  判断是否有属性,对应__dict__魔术方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x ** y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比</span></span><br><span class="line">a = User()</span><br><span class="line">print(User.__dict__)</span><br><span class="line">print(a.__dict__)</span><br></pre></td></tr></table></figure></li><li><p>槽: <code>__slots__</code></p><p> 固定类所具有的属性，不能动态添加属性</p><p> 实例不会分配 <code>__dict__</code></p><p> 实例无法动态添加属性</p><p> 优化内存分配, 大概能节约40%的内存.</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">'x'</span>, <span class="string">'y'</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="11-Python-性能之困"><a href="#11-Python-性能之困" class="headerlink" title="11. Python 性能之困"></a>11. Python 性能之困</h4><p>1、计算密集型</p><p>CPU 长时间满负荷运行, 如图像处理、大数据运算、圆周率计算等</p><p>计算密集型: 用 C 语言补充或者换编译器，目前是Cpython， 试试Pypi</p><p>Profile, timeit     选择进程</p><p>2、I/O 密集型  (input/output)</p><p>网络 IO, 文件 IO, 设备 IO 等</p><p>一切皆文件    选择线程</p><p>3、多任务处理</p><p>进程、线程、协程调度的过程叫做上下文切换</p><p>进程、线程、协程对比</p><p>进程是系统资源分配的最小单位。线程是系统调度的最小单位。协程是微线程，是线程的进化</p><table><thead><tr><th>名称</th><th>资源占用</th><th>数据通信</th><th>上下文切换 (Context)</th></tr></thead><tbody><tr><td> 进程</td><td>大(M)</td><td>不方便 (网络、共享内存、管道等)</td><td>操作系统按时间片切换, 不够灵活, 慢</td></tr><tr><td> 线程</td><td>小(k)</td><td>非常方便</td><td>按时间片切换, 不够灵活, 快</td></tr><tr><td> 协程</td><td>非常小(bytes)</td><td>非常方便</td><td>根据I/O事件切换, 更加有效的利用 CPU</td></tr></tbody></table><p>1、全局解释器锁 ( GIL )</p><p>它确保任何时候一个进程中都只有一个 Python 线程能进入 CPU 执行。</p><p>全局解释器锁造成单个进程无法使用多个 CPU 核心</p><p>通过多进程来利用多个 CPU 核心，一般进程数与CPU核心数相等，或者CPU核心数两倍<br><img src="GIL.png" alt="GIL" title="GIL"></p><p>2、什么是同步、异步、阻塞、非阻塞？</p><p>同步, 异步: 客户端调用服务器接口时</p><p>阻塞, 非阻塞: 服务端发生等待</p><p>阻塞 -&gt; 非阻塞  (阻塞是停下来等待,非阻塞是不会等待, 解决io单个任务问题.)  </p><p>同步 -&gt; 异步 (同步 是 任务一个 接一个执行,异步是任务同时执行.解决任务量大的问题)</p><p>3、事件驱动 + 多路复用</p><p>轮询: select, poll </p><p>事件驱动: epoll 基于事件的有效轮询 (e:event )</p><p>4、协程：Stackless / greenlets / gevent | tornado / asyncio</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio      <span class="comment"># 官方协程包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(<span class="string">'wait %s s'</span> % n)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(n)     <span class="comment"># 异步io   asyncio</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line">task1 = foo(<span class="number">1</span>)          <span class="comment"># 没有执行</span></span><br><span class="line">task2 = foo(<span class="number">1.5</span>)        <span class="comment"># 此处没有执行</span></span><br><span class="line">tasks = [asyncio.ensure_future(task1),</span><br><span class="line">         asyncio.ensure_future(task2)]</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()  <span class="comment"># 事件循环，协程调度器</span></span><br><span class="line">loop.run_until_complete( asyncio.wait(tasks))</span><br></pre></td></tr></table></figure><p>5、线程安全, 锁</p><ul><li>获得锁之后, 一定要释放, 避免死锁 </li><li>尽量使用 with 去操作锁</li><li>获得锁之后, 执行的语句, 只跟被锁资源有关</li><li>线程之间的数据交互尽量使用 queue</li></ul><h4 id="12-一些技巧和误区"><a href="#12-一些技巧和误区" class="headerlink" title="12. 一些技巧和误区"></a>12. 一些技巧和误区</h4><p>1、格式化打印 json        indent  缩进；sort_keys  字母表排序；ensure_ascii=False 允许显示中文</p><ul><li>调试时数据格式化：<code>json.dumps(data, indent=4, sort_keys=True, ensure_ascii=False)</code></li><li>传输时 json 压缩: <code>json.dumps(data, ensure_ascii=False, separators=[&#39;,&#39;,&#39;:&#39;])</code></li></ul><p>2、确保能取到有效值</p><ul><li><code>d.get(k, default)</code>  无值时使用默认值，对原字典无修改</li><li><code>d.setdefault</code> 无值时使用默认值，并将默认值写入原字典</li><li><code>x = a if foo() else b</code>   三元运算符</li><li><code>a or b</code>   python中所有的对象都有真值, or返回真的, and是遇到假的就返回.</li></ul><p>3、try…except… 的滥用</p><ul><li>不要把所有东西全都包住, 程序错误需要报出来</li><li>使用 <code>try...except</code> 要指明具体错误, <code>try</code> 结构不是用来隐藏错误的, 而是用来有方向的处理错误的</li></ul><p>4、利用 dict 做模式匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'i am do1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'i am do2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'i am do3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do4</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'i am do4'</span>)</span><br><span class="line"></span><br><span class="line">mapping = &#123;<span class="number">1</span>: do1, <span class="number">2</span>: do2, <span class="number">3</span>: do3, <span class="number">4</span>: do4&#125;</span><br><span class="line">mod = random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">func = mapping.get(mod, do4)    <span class="comment"># 默认do4</span></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p>1、<code>inf, -inf, nan</code>       inf  无穷大   float(‘inf’)    </p><p>2、字符串拼接尽量使用 <code>join</code> 方式: 速度快, 内存消耗小</p><p>3、property: 把一个方法属性化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""I am the 'x' property."""</span></span><br><span class="line">        <span class="keyword">return</span> self._x</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># c.x = xx  user.password</span></span><br><span class="line"><span class="meta">    @x.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self, value)</span>:</span></span><br><span class="line">    self._x = value</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @x.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self)</span>:</span> </span><br><span class="line">    <span class="keyword">del</span> self._x</span><br></pre></td></tr></table></figure><p>4、else 子句: <code>if, for, while, try</code></p><p>5、collections 模块     from collections import  defaultdict , OrderedDict, Counter , namedtuple</p><ul><li><p>defaultdict (可调用对象，字典)</p></li><li><p>OrderedDict     有序字典</p></li><li><p>Counter    计数器     可以计数字符串字符出现的次数</p><p>c = Counter()</p><p>c[n] += 1</p></li><li><p>namedtuple    命名元组</p><p>Dog = namedtuple(‘Dog’, [‘head’, ‘body’, ‘leg’, ‘tail’])</p><p>dog = Dog(1,1,4,1)</p><p>dog.head</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/SorrisiYi/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/SorrisiYi/assets/js
      
    
    </summary>
    
      <category term="python" scheme="https://addyzk.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://addyzk.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>mysql高级</title>
    <link href="https://addyzk.github.io/2018/10/12/mysql%E9%AB%98%E7%BA%A7/"/>
    <id>https://addyzk.github.io/2018/10/12/mysql高级/</id>
    <published>2018-10-12T12:17:45.000Z</published>
    <updated>2019-05-18T06:09:57.413Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/SorrisiYi/assets/css/APlayer.min.css"><script src="/SorrisiYi/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#mysql数据库</p><h2 id="一、高级"><a href="#一、高级" class="headerlink" title="一、高级"></a>一、高级</h2><h3 id="1-1-子查询"><a href="#1-1-子查询" class="headerlink" title="1.1 子查询"></a>1.1 子查询</h3><ul><li>子查询嵌入到其他查询语句中查询语句，子查询只能出现在from，where中</li><li>子查询不要用select *,exists除外</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> title </span><br><span class="line"><span class="keyword">from</span> forum </span><br><span class="line"><span class="keyword">where</span> uid <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> php_user <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'王琨'</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> blog_article <span class="keyword">where</span> cid <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> cid <span class="keyword">from</span> blog_category <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'心情'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> uid,username,gender <span class="keyword">from</span> blog_user <span class="keyword">where</span> gender=<span class="string">'男'</span>) <span class="keyword">as</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>###1.2 多表查询(<code>*****</code>)</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> category <span class="keyword">in</span> blog_category:</span><br><span class="line">   <span class="keyword">for</span> <span class="selector-tag">article</span> <span class="keyword">in</span> blog_article:</span><br><span class="line">       <span class="keyword">if</span> category<span class="selector-class">.cid</span> == <span class="selector-tag">article</span><span class="selector-class">.cid</span>:</span><br><span class="line">            #放到结果集中</span><br></pre></td></tr></table></figure><ul><li>多表连接必须<strong>要有连接条件</strong>，否则结果没有意义</li><li>多表连接有两种写法：隐式(标准sql)和显式内连接</li><li><p>隐式(标准sql)连接 ：  连接条件写到where字句中</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select title,content,name,publish_time </span><br><span class="line"><span class="keyword">from</span><span class="built_in"> user </span>u,forum f  #给表起一个别名，方便书写</span><br><span class="line">where u.id = f.uid; 在where写链接条件</span><br><span class="line"> </span><br><span class="line">select title,content,name,publish_time </span><br><span class="line"><span class="keyword">from</span><span class="built_in"> user </span>u,forum f </span><br><span class="line">where u.id = f.uid <span class="keyword">and</span> <span class="attribute">name</span>=<span class="string">'王琨'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select a.username,b.name ,c.title</span><br><span class="line">    -&gt; <span class="keyword">from</span> bbs_user a,bbs_category b,bbs_forum c</span><br><span class="line">    -&gt; where b.cid = c.cid <span class="keyword">and</span> c.uid = a.uid;</span><br></pre></td></tr></table></figure></li></ul><p>显示内连接（inner join）</p> <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">select</span> a.uid,username,<span class="built_in">title</span>,content </span><br><span class="line">    -&gt; <span class="keyword">from</span> bbs_user a <span class="keyword">inner</span> <span class="keyword">join</span> bbs_forum b <span class="keyword">on</span> a.uid =b.uid #关联条件</span><br><span class="line">    -&gt; <span class="keyword">where</span> a.uid &lt; <span class="number">5</span>;  #过滤条件</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">select</span> username,name,<span class="built_in">title</span></span><br><span class="line">    -&gt; <span class="keyword">from</span> bbs_user a <span class="keyword">inner</span> <span class="keyword">join</span> bbs_forum c <span class="keyword">on</span> c.uid =a.uid </span><br><span class="line">    -&gt; <span class="keyword">inner</span> <span class="keyword">join</span> bbs_category b <span class="keyword">on</span> c.cid = b.cid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">title</span>,remark,username <span class="keyword">from</span> blog_remark r <span class="keyword">join</span> blog_article a <span class="keyword">on</span> r.aid = a.aid </span><br><span class="line">                                                <span class="keyword">join</span> blog_user u <span class="keyword">on</span> r.uid = u.uid;</span><br><span class="line"><span class="keyword">select</span>后的字段如果在多个表中都有，引用的时候必须加上表名.字段名</span><br></pre></td></tr></table></figure><p>表的自身连接</p> <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select * from areainfo a,areainfo b where a.pid=b.code and  a.name=<span class="emphasis">'青河县'</span>;</span><br><span class="line"><span class="code">+--------+</span>-----------<span class="code">+--------+</span>--------<span class="code">+-----------------+</span>--------+</span><br><span class="line">| code   | name      | pid    | code   | name            | pid    |</span><br><span class="line"><span class="code">+--------+</span>-----------<span class="code">+--------+</span>--------<span class="code">+-----------------+</span>--------+</span><br><span class="line">| 654325 | 青河县    | 654300 | 654300 | 阿勒泰地区      | 650000 |</span><br><span class="line"><span class="code">+--------+</span>-----------<span class="code">+--------+</span>--------<span class="code">+-----------------+</span>--------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//表的字段可以直接连接</span></span><br><span class="line">select * from zzl<span class="emphasis">_student where sno = monitor and class='95031';</span></span><br></pre></td></tr></table></figure><h3 id="1-3-外连接"><a href="#1-3-外连接" class="headerlink" title="1.3 外连接"></a>1.3 外连接</h3><blockquote><p>两张表关联查询时，根据以那种表为主可以分为左外连接和右外连接</p></blockquote><p>左外连接  </p><p>​      以左表为主，如果右边的表里没有匹配的记录，则添加一个万能记录（各个字段都为null)与之连接</p><pre><code>select username,r.* from blog_user u left join  blog_remark r on u.uid = r.uid+-----------+------+-------------+------+------+------------+-----------+| username  | rid  | remark      | aid  | uid  | remarktime | isdisplay |+-----------+------+-------------+------+------+------------+-----------+| 萧峰      |    1 | adsafd      |    1 |    1 | NULL       |         0 || 慕容复    |    2 | kdkdkdkd    |    2 |    3 | NULL       |         0 || 丁春秋    |    3 | ooooooooooo |    3 |    4 | NULL       |         0 || 丁春秋    |    4 | ppppp       |    2 |    4 | NULL       |         0 || 阿朱      | NULL | NULL        | NULL | NULL | NULL       |      NULL || 阿碧      | NULL | NULL        | NULL | NULL | NULL       |      NULL || 谢晓峰    | NULL | NULL        | NULL | NULL | NULL       |      NULL |+-----------+------+-------------+------+------+------------+-----------+</code></pre><p>右外连接（right join）</p><p>以右表为主，如果左边的表里没有匹配记录，则增加一个万能记录与之连接</p><h3 id="1-4-集合操作"><a href="#1-4-集合操作" class="headerlink" title="1.4 集合操作"></a>1.4 集合操作</h3><p>可以使用union将两个查询结果合并，mysql只支持并，不支持差和交</p><p>两个结果集中字段数一样，对应字段类型兼容</p><p>自动去除重复记录,不去除重复记录可以用 union all</p><p>order by 放到最后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">class</span> = <span class="string">'95031'</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> ssex=<span class="string">'女'</span>;</span><br></pre></td></tr></table></figure><h3 id="1-5-内部函数"><a href="#1-5-内部函数" class="headerlink" title="1.5 内部函数"></a>1.5 内部函数</h3><p>字符串函数</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>char_length(<em>str</em>)</td><td>获取字符串的字符个数</td></tr><tr><td>length(str)</td><td>获取字符串的字节数</td></tr><tr><td>concat(s1, s2, … , sn)</td><td>连接s1, s2, …, sn 为一个字符串</td></tr><tr><td>lower(str)</td><td>将字符串str中所有的字符转换为小写</td></tr><tr><td>upper(str)</td><td>将字符串str中所有的字符转换为大写</td></tr><tr><td>left(str, x)</td><td>返回字符串str最左边的x个字符</td></tr><tr><td>right(str, y)</td><td>返回字符串str最右边的y个字符</td></tr><tr><td>lpad(str, n, pad)</td><td>用字符串pad对str最左边进行填充， 直到长度为n个字符长度</td></tr><tr><td>rpad(str, n, pad)</td><td>用字符串pad对str最右边进行填充， 直到长度为n个字符长度</td></tr><tr><td>ltrim(str)</td><td>去掉str中最左边的空格</td></tr><tr><td>rtrim(str)</td><td>去掉str中最右边的空格</td></tr><tr><td>trim(str)</td><td>去掉字符串str两边的空格</td></tr><tr><td>repeat(str, x)</td><td>返回str中重复出现x次的结果</td></tr><tr><td>replace(str, a, b)</td><td>将字符串str中的a更换为b</td></tr><tr><td>insert(str, x, y, instr)</td><td>将字符串str从第x位置开始， y个字符长度的子字符串替换为字符串instr</td></tr><tr><td>strcmp（s1, s2）</td><td>比较字符串s1, s2</td></tr><tr><td>substring(str, x, y)</td><td>返回字符串str x位置开始y个字符长度的字符串</td></tr></tbody></table><p>日期函数</p><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>curdate()</td><td>得到当前日期</td></tr><tr><td>curtime()</td><td>得到当前时间</td></tr><tr><td>now()</td><td>得到当前日期和时间</td></tr><tr><td>year(date)</td><td>得到date的年份</td></tr><tr><td>month(date)</td><td>得到date的月份</td></tr><tr><td>day(date)</td><td>得到date的天</td></tr><tr><td>hour(time)</td><td>得到time的小时</td></tr><tr><td>minute(time)</td><td>得到time 的分钟</td></tr><tr><td>second(time)</td><td>得到time的秒</td></tr><tr><td>week(date)</td><td>得到date是一年中的第几周</td></tr><tr><td>date_format(date,fmt)</td><td>按格式化串fmt返回date的日期字符串</td></tr></tbody></table><p> select DATE_FORMAT(now(),’%Y- %m-%d %H:%i:%s’);  </p><p>数学函数</p><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>abs(x)</td><td>求x的绝对值</td></tr><tr><td>ceil(x)</td><td>向上取整</td></tr><tr><td>floor(x)</td><td>向下取整</td></tr><tr><td>round(x,d)</td><td>四舍五入，d为保留小数的位数</td></tr><tr><td>pow(x,y)</td><td>x的y次幂</td></tr><tr><td>rand()</td><td>0~1之间的随机小数</td></tr><tr><td>mod(x,y)</td><td>等同于x % y,求x对y的模</td></tr></tbody></table><p>其它函数</p><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>convert(expr as type)/cast(expr as type)</td><td>将表达式expr转换为type类型，type可以是：char(n)、date、datetime、integer、decimal</td></tr><tr><td>md5(str)</td><td>计算str的哈希值，返回一个 32位十六进制数字的二进制字符串</td></tr><tr><td>sha1(str)/sha(str)</td><td>计算str的哈希值，返回一个 40位十六进制数字的二进制字符串</td></tr></tbody></table><h2 id="二、数据控制"><a href="#二、数据控制" class="headerlink" title="二、数据控制"></a>二、数据控制</h2><p>###2.1 事务</p><p>ACID，指数据库事务正确执行的四个基本要素的缩写。包含：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。一个支持事务（Transaction）的数据库，必须要具有这四种<a href="https://baike.baidu.com/item/%E7%89%B9%E6%80%A7/3128227" target="_blank" rel="noopener">特性</a>，否则在事务过程（Transaction processing）当中无法保证数据的正确性，交易过程极可能达不到交易方的要求。</p><p>事务把一组操作看做一个整体，要不都操作成功，要不都操作失败 。(ACID)</p><p>表的数据库引擎必须是innodb，innodb支持事物，myisam不支持事务</p><p>修改表引擎：alter table  表名 engine = innodb</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">查询是否为自动提交</span><br><span class="line"><span class="keyword">select</span> @@autocommit  (<span class="number">1</span>为自动提交   <span class="number">0</span>为手动提交)</span><br><span class="line"></span><br><span class="line">关闭自动提交</span><br><span class="line"><span class="keyword">set</span> autocommit = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> /<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">一组操作</span><br><span class="line"><span class="keyword">commit</span>/<span class="keyword">rollback</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span> 提交 会把数据写到硬盘</span><br><span class="line"><span class="keyword">rollback</span> 回滚 撤销操作</span><br></pre></td></tr></table></figure><p>###2.2 授权管理(了解)</p><p>创建用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'用户名'</span>@<span class="string">'服务器地址'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'密码'</span></span><br></pre></td></tr></table></figure><p>删除用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span>  <span class="string">'用户名'</span>@<span class="string">'服务器地址'</span></span><br></pre></td></tr></table></figure><p>修改密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改当前登录用户</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> = <span class="keyword">password</span>(<span class="string">'123456'</span>);</span><br><span class="line"></span><br><span class="line">一般管理员可以修改任意用户密码</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> <span class="keyword">for</span> <span class="string">'db'</span>@<span class="string">'localhost'</span> = <span class="keyword">password</span>(<span class="string">'2333'</span>);</span><br></pre></td></tr></table></figure><p>刷新</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span></span><br></pre></td></tr></table></figure><p>授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> 权限  <span class="keyword">on</span> 数据库.表  <span class="keyword">to</span> <span class="string">'用户名'</span>@<span class="string">'服务器地址'</span></span><br><span class="line"> <span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'dd'</span>@<span class="string">'localhost'</span></span><br><span class="line"> *.* 所有数据库的所有表</span><br><span class="line"> <span class="keyword">all</span> 代表所有权限  </span><br><span class="line"> 权限包括：<span class="keyword">select</span>、<span class="keyword">update</span>、<span class="keyword">delete</span>、<span class="keyword">alter</span>、<span class="keyword">insert</span></span><br></pre></td></tr></table></figure><p>回收</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">select</span> <span class="keyword">on</span> test.stars <span class="keyword">from</span> <span class="string">'db'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><h2 id="三、索引"><a href="#三、索引" class="headerlink" title="三、索引"></a>三、索引</h2><p>索引就像图书的目录，可以加快查询速度</p><h3 id="3-1-索引的优点"><a href="#3-1-索引的优点" class="headerlink" title="3.1 索引的优点"></a>3.1 索引的优点</h3><ul><li>可以大大加快数据的检索速度</li><li>唯一索引可以保证数据的唯一性</li><li>可以降低分组、排序的时间</li><li>可以使用查询优化器提高系统性能</li></ul><h3 id="3-2-索引的缺点"><a href="#3-2-索引的缺点" class="headerlink" title="3.2 索引的缺点"></a>3.2 索引的缺点</h3><ul><li>建立索引会建立对应索引文件，占用大量空间</li><li>建立索引会降低增、删、改的效率</li></ul><h3 id="3-3-不建立索引"><a href="#3-3-不建立索引" class="headerlink" title="3.3 不建立索引"></a>3.3 不建立索引</h3><ul><li>频繁更新的字段不要建立索引</li><li>没出现在where、having，不要建立索引</li><li>数据量少的表没有必要建立索引</li><li>唯一性比较差的字段不要建立索引</li></ul><h3 id="3-4-索引分类"><a href="#3-4-索引分类" class="headerlink" title="3.4 索引分类"></a>3.4 索引分类</h3><h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><pre><code>create index 索引名 on 表名(字段 asc/desc) 默认asc升序</code></pre><h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><p>  在唯一索引所在列不能有重复值，增加和修改会受影响。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span>  <span class="keyword">unique</span> <span class="keyword">index</span> 索引名 <span class="keyword">on</span> 表名(字段 <span class="keyword">asc</span>/<span class="keyword">desc</span>) 默认<span class="keyword">asc</span>升序</span><br></pre></td></tr></table></figure><h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><p>  创建表，主键索引会自动添加，要求在主键上不能有重复值，不能有空值</p><h4 id="复合索引（联合索引）-索引了多个列"><a href="#复合索引（联合索引）-索引了多个列" class="headerlink" title="复合索引（联合索引） 索引了多个列"></a>复合索引（联合索引） 索引了多个列</h4><p>使用联合索引，必须包含左前缀。  （a,b,c)</p><ul><li>a</li><li>a,b</li><li>a,b,c</li></ul><h4 id="全文索引（了解）"><a href="#全文索引（了解）" class="headerlink" title="全文索引（了解）"></a>全文索引（了解）</h4><p>   一般会用全文索引服务器(sphinx)，不会直接创建全文索引</p>  <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span>  FULLTEXT <span class="keyword">index</span> 索引名 <span class="keyword">on</span> 表名(字段 <span class="keyword">asc</span>/<span class="keyword">desc</span>)</span><br></pre></td></tr></table></figure><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4>  <figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> 索引名 <span class="keyword">on</span> 表</span><br></pre></td></tr></table></figure><h4 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h4>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">show index from 表 \G</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看sql性能</span></span><br><span class="line">explain select sno,sname from student where class='1812'\G;</span><br><span class="line">mysql&gt; explain select sno,sname from student where sclass='1812' ;</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">---------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">| id | select_type | table   | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">---------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">|  1 | SIMPLE      | student | NULL       | ALL  | NULL          | NULL | NULL    | NULL |   10 |    10.00 | Using where |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">---------</span>+<span class="params">------------</span>+<span class="params">------</span>+<span class="params">---------------</span>+<span class="params">------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">----------</span>+<span class="params">-------------</span>+</span><br><span class="line">1 row in <span class="keyword">set</span>, 1 warning <span class="params">(0.00 sec)</span></span><br><span class="line">type:  ALL  全表扫描</span><br><span class="line">       index  使用索引</span><br><span class="line">       range  在指定范围内使用索引</span><br><span class="line">       const、system 常量查询</span><br></pre></td></tr></table></figure><h4 id="其它创建索引的方式"><a href="#其它创建索引的方式" class="headerlink" title="其它创建索引的方式"></a>其它创建索引的方式</h4> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表 <span class="keyword">add</span> <span class="keyword">index</span>(字段<span class="number">1</span>,字段<span class="number">2</span>,...)</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表 <span class="keyword">add</span> primary <span class="keyword">key</span>(字段<span class="number">1</span>,字段<span class="number">2</span>,...)</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表 <span class="keyword">add</span> <span class="keyword">unique</span>(字段<span class="number">1</span>,字段<span class="number">2</span>,...)</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表 <span class="keyword">add</span> fulltext(字段<span class="number">1</span>,字段<span class="number">2</span>,...)</span><br></pre></td></tr></table></figure><h3 id="3-5-不使用索引的情况"><a href="#3-5-不使用索引的情况" class="headerlink" title="3.5 不使用索引的情况"></a>3.5 不使用索引的情况</h3><ul><li>查询时的联合索引没有左前缀，不使用索引</li><li>or条件里，如果一方字段没有索引，则不使用索引</li><li>类型不对应的不会使用索引</li><li>like  ‘%tom’ ,如果左边是通配符，不会使用索引</li><li>使用!=、&lt;&gt;、not in操作，不使用索引</li></ul><h2 id="四、外键"><a href="#四、外键" class="headerlink" title="四、外键"></a>四、外键</h2><p>如果表A的主关键字是表B中的字段，则该字段称为表B的外键，表A称为主表，表B称为从表</p><ul><li>数据表引擎必须是innodb</li><li>主表和从表相关的外键字段类型必须兼容</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">创建外键</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (从表的外键列) <span class="keyword">REFERENCES</span> 主表名 (主键列) </span><br><span class="line">[<span class="keyword">ON</span> <span class="keyword">DELETE</span> reference_option]</span><br><span class="line">[<span class="keyword">ON</span> <span class="keyword">UPDATE</span> reference_option]</span><br><span class="line"></span><br><span class="line">reference_option:</span><br><span class="line">RESTRICT | <span class="keyword">CASCADE</span> | <span class="keyword">SET</span> <span class="literal">NULL</span> | <span class="keyword">NO</span> <span class="keyword">ACTION</span></span><br><span class="line">  <span class="number">1.</span> <span class="keyword">CASCADE</span>: 从父表中删除或更新对应的行，同时自动的删除或更新子表中匹配的行。<span class="keyword">ON</span> <span class="keyword">DELETE</span> CANSCADE和<span class="keyword">ON</span> <span class="keyword">UPDATE</span> CANSCADE都被<span class="keyword">InnoDB</span>所支持。</span><br><span class="line">  </span><br><span class="line">  <span class="number">2.</span> <span class="keyword">SET</span> <span class="literal">NULL</span>: 从父表中删除或更新对应的行，同时将子表中的外键列设为空。注意，这些在外键列没有被设为<span class="keyword">NOT</span> <span class="literal">NULL</span>时才有效。<span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="literal">NULL</span>和<span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">SET</span> <span class="keyword">SET</span> <span class="literal">NULL</span>都被<span class="keyword">InnoDB</span>所支持。</span><br><span class="line"></span><br><span class="line">  <span class="number">3.</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span>: <span class="keyword">InnoDB</span>拒绝删除或者更新父表。</span><br><span class="line"></span><br><span class="line">  <span class="number">4.</span> RESTRICT: 拒绝删除或者更新父表。指定RESTRICT（或者<span class="keyword">NO</span> <span class="keyword">ACTION</span>）和忽略<span class="keyword">ON</span> <span class="keyword">DELETE</span>或者<span class="keyword">ON</span> <span class="keyword">UPDATE</span>选项的效果是一样的。</span><br><span class="line"></span><br><span class="line">删除外键</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> 外键名</span><br></pre></td></tr></table></figure><h2 id="五、视图"><a href="#五、视图" class="headerlink" title="五、视图"></a>五、视图</h2><p>有时候经常会遇到复杂的查询，写起来比较麻烦，这时候我们可以使用视图简化查询。视图就是固化的sql语句，可以不把视图当做基本表使用</p><p>不要在视图上进行增、删、改</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">创建视图</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 视图名(字段列表) <span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span>子句</span><br><span class="line"></span><br><span class="line">删除视图</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> 视图名</span><br></pre></td></tr></table></figure><h2 id="六、数据库备份与恢复"><a href="#六、数据库备份与恢复" class="headerlink" title="六、数据库备份与恢复"></a>六、数据库备份与恢复</h2><p>备份</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">不用登录mysql，直接执行mysqldump命令,将指定数据库备份到家目录下的指定文件</span><br><span class="line">mysqldump –uroot –p 数据库名 &gt; <span class="symbol">~/备份文件名.sql</span>;</span><br></pre></td></tr></table></figure><p>恢复</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">首先要创建一个mysql数据库，然后退出mysql，执行以下命令</span><br><span class="line">mysql -uroot –<span class="selector-tag">p</span> 数据库名 &lt; ~/备份文件.sql</span><br></pre></td></tr></table></figure><h2 id="七、pymysql操作mysql数据库"><a href="#七、pymysql操作mysql数据库" class="headerlink" title="七、pymysql操作mysql数据库"></a>七、pymysql操作mysql数据库</h2><p>安装pymysql</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> pymysql</span><br></pre></td></tr></table></figure><h3 id="7-1-pymysql操作数据库的五行拳"><a href="#7-1-pymysql操作数据库的五行拳" class="headerlink" title="7.1 pymysql操作数据库的五行拳"></a>7.1 pymysql操作数据库的五行拳</h3><ol><li><p>连接数据库</p><p>使用Connect方法连接数据库</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pymysql.Connections.Connection(<span class="attribute">host</span>=None, <span class="attribute">user</span>=None, <span class="attribute">password</span>=<span class="string">''</span>, <span class="attribute">database</span>=None, <span class="attribute">port</span>=0,  <span class="attribute">charset</span>=<span class="string">''</span>)</span><br><span class="line">参数说明：</span><br><span class="line">    host – 数据库服务器所在的主机。</span><br><span class="line">   <span class="built_in"> user </span>– 登录用户名。</span><br><span class="line">    password – 登录用户密码。</span><br><span class="line">    database – 连接的数据库。</span><br><span class="line">   <span class="built_in"> port </span>– 数据库开放的端口。（默认: 3306）</span><br><span class="line">    charset – 连接字符集。</span><br><span class="line">返回值：</span><br><span class="line">   返回连接对象</span><br><span class="line">   </span><br><span class="line">例子：</span><br><span class="line">link = pymysql.Connect(<span class="attribute">host</span>=<span class="string">'localhost'</span>, <span class="attribute">port</span>=3306, <span class="attribute">user</span>=<span class="string">'root'</span>, <span class="attribute">password</span>=<span class="string">'123456'</span>, <span class="attribute">db</span>=<span class="string">'zzl'</span>, <span class="attribute">charset</span>=<span class="string">'utf8'</span>)</span><br></pre></td></tr></table></figure><ul><li>连接对象方法</li></ul><p>| 方法                  | 说明              |<br>| ——————- | ————— |<br>| begin()             | 开启事务            |<br>| commit()            | 提交事务            |<br>| cursor(cursor=None) | 创建一个游标用来执行sql语句 |<br>| rollback()          | 回滚事务            |<br>| close()             | 关闭连接            |<br>| select_db(db)       | 选择数据库           |</p></li><li><p>创建游标</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cursor</span> = link.<span class="built_in">cursor</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">cursor</span>.rowcount) #打印受影响行数</span><br></pre></td></tr></table></figure><p>| 方法                        | 说明                                       |<br>| ————————- | —————————————- |<br>| close()                   | 关闭游标                                     |<br>| execute(query, args=None) | 执行单条语句，传入需要执行的语句，是string类型；同时可以给查询传入参数，参数可以是tuple、list或dict。执行完成后，会返回执行语句的影响行数。 |<br>| fetchone()                | 取一条数据                                    |<br>| fetchmany(n)              | 取多条数据                                    |<br>| fetchall()                | 取所有数据                                    |</p></li><li><p>执行sql语句</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行sql语句</span></span><br><span class="line"><span class="attr">sql</span> = <span class="string">'select * from user1'</span></span><br><span class="line"><span class="comment"># 执行完sql语句，返回受影响的行数</span></span><br><span class="line"><span class="attr">num</span> = cursor.execute(sql)</span><br></pre></td></tr></table></figure></li><li><p>获取结果集</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result1 = <span class="built_in">cursor</span>.fetchone()</span><br><span class="line"><span class="built_in">print</span>(result1)</span><br></pre></td></tr></table></figure></li><li><p>关闭连接</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cursor</span>.<span class="built_in">close</span>()</span><br><span class="line">link.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure></li></ol><p>注意：</p><p>写完代码后，需要将py文件添加可执行权限 </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x conndb.py</span><br><span class="line">./conndb.py</span><br></pre></td></tr></table></figure><h3 id="7-2-pymysql中事务处理"><a href="#7-2-pymysql中事务处理" class="headerlink" title="7.2 pymysql中事务处理"></a>7.2 pymysql中事务处理</h3><p>pymysql默认是没有开启自动提交事务，所以我们如果进行增、删、改，就必须手动提交或回滚事务。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sql = <span class="string">'delete from user where id=%s'</span> % user_id</span><br><span class="line"></span><br><span class="line"># 如果要执行增删改语句的时候，下面的就是固定格式</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="built_in">cursor</span>.<span class="keyword">execute</span>(sql)</span><br><span class="line"># 如果全部执行成功，提交事务</span><br><span class="line">link.commit()</span><br><span class="line"><span class="keyword">print</span>(<span class="built_in">cursor</span>.lastrowid) #获取最后插入记录的自增id号</span><br><span class="line">except Exception <span class="keyword">as</span> <span class="keyword">e</span>:</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">e</span>)</span><br><span class="line">link.rollback()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line"><span class="built_in">cursor</span>.<span class="keyword">close</span>()</span><br><span class="line">link.<span class="keyword">close</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/SorrisiYi/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/SorrisiYi/assets/js
      
    
    </summary>
    
      <category term="数据库" scheme="https://addyzk.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://addyzk.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>mysql优化</title>
    <link href="https://addyzk.github.io/2018/09/17/sql%E4%BC%98%E5%8C%96/"/>
    <id>https://addyzk.github.io/2018/09/17/sql优化/</id>
    <published>2018-09-17T13:27:03.000Z</published>
    <updated>2019-05-18T06:09:33.871Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/SorrisiYi/assets/css/APlayer.min.css"><script src="/SorrisiYi/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="mysql优化"><a href="#mysql优化" class="headerlink" title="mysql优化"></a>mysql优化</h1><h2 id="一、数据库设计原则"><a href="#一、数据库设计原则" class="headerlink" title="一、数据库设计原则"></a>一、数据库设计原则</h2><h3 id="数据库设计的三范式"><a href="#数据库设计的三范式" class="headerlink" title="数据库设计的三范式"></a>数据库设计的三范式</h3><p>学生表(学号，姓名，生日，课程名，课程成绩，等级，学院，院长)</p><table><thead><tr><th>学号</th><th>姓名</th><th style="text-align:left">生日</th><th>课程号</th><th>课程名</th><th>成绩</th><th>等级</th><th>学院</th><th>院长</th></tr></thead><tbody><tr><td>10001</td><td>张三</td><td style="text-align:left">1998.1.1</td><td>tp3021,h333</td><td>计算机原理，高等数学</td><td>87，90</td><td>B,A</td><td>计算机学院</td><td>xxx</td></tr></tbody></table><p>第一范式  表中每一个属性不可再分，不允许出现表中套表的情况</p><table><thead><tr><th>学号</th><th>姓名</th><th>生日</th><th>课程号</th><th>成绩</th><th>等级</th><th>学院</th><th>院长</th></tr></thead><tbody><tr><td>10001</td><td>张三</td><td>1998.1.1</td><td>tp3021</td><td>87</td><td>B</td><td>计算机学院</td><td>xxx</td></tr><tr><td>10001</td><td>张三</td><td>1998.1.1</td><td>h333</td><td>90</td><td>A</td><td>计算机学院</td><td>xxx</td></tr></tbody></table><table><thead><tr><th>课程号</th><th>课程名</th></tr></thead><tbody><tr><td>tp3201</td><td>计算机原理</td></tr><tr><td>h333</td><td>高等数学</td></tr></tbody></table><p>第二范式  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">键/码   区分不同记录，可以一个属性或者多个属性的组合，主键是指定的键</span><br><span class="line">每一个非主属性（不保含在任何一个键里的属性）必须完全依赖于主键（不存在非主属性部分依赖于码）</span><br></pre></td></tr></table></figure><table><thead><tr><th>学号</th><th>姓名</th><th>生日</th><th>学院编号</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>学院编号</th><th>学院</th><th>院长</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th>学号</th><th>课程号</th><th>成绩</th><th>等级</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><p>第三范式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第三范式： 不存在非主属性传递依赖于主码</span><br></pre></td></tr></table></figure><table><thead><tr><th>学号</th><th>课程号</th><th>成绩</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th>等级编号</th><th>up</th><th>down</th><th>等级</th></tr></thead><tbody><tr><td>1</td><td>100</td><td>90</td><td>A</td></tr><tr><td>2</td><td>89</td><td>80</td><td>B</td></tr></tbody></table><p>反范式设计</p><p>如果考虑查询性能，应该尽量减少表的关联</p><p>将经常查询的数据都放到一个表里，尽量少采用字典表</p><h3 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h3><p>尽量选用长度小的类型</p><p>能选用整型，不要选用字符串</p><p>日期型能用date就不要使用datetime，不准用字符串存储日期</p><p>字段不要设置默认值null</p><p>主键一般无意义，用整型，自增</p><h2 id="二、sql语句的优化"><a href="#二、sql语句的优化" class="headerlink" title="二、sql语句的优化"></a>二、sql语句的优化</h2><p>1.开启慢查询</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">在mysql下查询</span><br><span class="line">mysql&gt; show VARIABLES like <span class="emphasis">'%slow%'</span>;</span><br><span class="line"><span class="code">+---------------------------+</span>--------------------------------+</span><br><span class="line">| Variable<span class="emphasis">_name             | Value                          |</span></span><br><span class="line"><span class="emphasis">+---------------------------+--------------------------------+</span></span><br><span class="line"><span class="emphasis">| log_</span>slow<span class="emphasis">_admin_</span>statements | OFF                            |</span><br><span class="line">| log<span class="emphasis">_slow_</span>slave<span class="emphasis">_statements | OFF                            |</span></span><br><span class="line"><span class="emphasis">| slow_</span>launch<span class="emphasis">_time          | 2                              |慢查询的阈值，超过这个值认为是慢查询</span></span><br><span class="line"><span class="emphasis">| slow_</span>query<span class="emphasis">_log            | OFF                            |慢查询是关闭的</span></span><br><span class="line"><span class="emphasis">| slow_</span>query<span class="emphasis">_log_</span>file       | /var/lib/mysql/ubuntu-slow.log |慢查询日志文件路径</span><br><span class="line"><span class="code">+---------------------------+</span>--------------------------------+</span><br><span class="line">5 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"></span><br><span class="line">#在[mysqld]后面增加</span><br><span class="line">long<span class="emphasis">_query_</span>time = 1   #超过1秒钟的sql记录下来</span><br><span class="line">log-slow-queries = /var/mysql/log/log.txt  #慢查询的日志文件</span><br><span class="line">log-queries-no-using-indexes   #把没使用索引的查询记录下来</span><br></pre></td></tr></table></figure><p>2 使用explain/desc分析sql语句</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">explain  select <span class="string">...</span>    <span class="comment">#分析sql语句，sql语句本身并不执行</span></span><br><span class="line">explain select name ,age from user where age &gt;10</span><br><span class="line">    -&gt; ;</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">-------</span>+<span class="params">---------------</span>+<span class="params">-----------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">-------------</span>+</span><br><span class="line">| id | select_type | table | type  | possible_keys | key       | key_len | ref  | rows | Extra       |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">-------</span>+<span class="params">---------------</span>+<span class="params">-----------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">-------------</span>+</span><br><span class="line">|  1 | SIMPLE      | user  | range | index_age     | index_age | 2       | NULL |    2 | Using where |</span><br><span class="line">+<span class="params">----</span>+<span class="params">-------------</span>+<span class="params">-------</span>+<span class="params">-------</span>+<span class="params">---------------</span>+<span class="params">-----------</span>+<span class="params">---------</span>+<span class="params">------</span>+<span class="params">------</span>+<span class="params">-------------</span>+</span><br><span class="line">1 row in <span class="keyword">set</span> <span class="params">(0.00 sec)</span></span><br><span class="line">select_type  :  查询的类型  </span><br><span class="line">              simple 指单表查询（不使用连接、子查询）</span><br><span class="line">              primary： 主查询</span><br><span class="line">              union  联合查询的第二个sql语句，或后面的查询</span><br><span class="line">              subquery  子查询</span><br><span class="line">table   表名</span><br><span class="line">type    查询方式：</span><br><span class="line">all</span><br><span class="line">全表扫描，对于数据表从头到尾找一遍</span><br><span class="line">如果有limit限制，则找到之后就不在继续向下扫描</span><br><span class="line">select * from tb1 where email = 'seven@live.com'</span><br><span class="line">select * from tb1 where email = 'seven@live.com' limit 1;</span><br><span class="line">找到一个后就不再继续扫描</span><br><span class="line">index</span><br><span class="line">全索引扫描，对索引从头到尾找一遍</span><br><span class="line">select id from student;</span><br><span class="line">range</span><br><span class="line">对索引列进行范围查找</span><br><span class="line">index_merge</span><br><span class="line">合并索引，使用多个单列索引搜索</span><br><span class="line">ref_or_null</span><br><span class="line">ref</span><br><span class="line">根据索引查找一个或多个值</span><br><span class="line">eq_ref</span><br><span class="line">连接时使用primary key 或 unique类型</span><br><span class="line">const</span><br><span class="line">常量</span><br><span class="line">表最多有一个匹配行,因为仅有一行,在这行的列值可被优化器剩余部分认为是常数,const表很快,</span><br><span class="line">因为它们只读取一次</span><br><span class="line">system</span><br><span class="line">系统，表仅有一行<span class="params">(=系统表)</span>。这是const联接类型的一个特例</span><br><span class="line">性能</span><br><span class="line">all &lt; index &lt; range &lt; index_merge &lt; ref_or_null &lt; ref &lt; eq_ref &lt; system/const</span><br><span class="line"> possible_keys  可能被用到的索引</span><br><span class="line"> key             使用的索引</span><br><span class="line"> key_len         索引字段最大使用长度</span><br><span class="line"> rows            影响的行数，越小越好</span><br><span class="line"> </span><br><span class="line"> 关注：type 、key、rows</span><br></pre></td></tr></table></figure><p>3 优化sql语句</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1 查询的时候不要使用select *</span><br><span class="line">2.尽量使用limit 1 取得唯一的一行</span><br><span class="line">3.尽量使用索引字段进行查询</span><br><span class="line">4 可以使用覆盖索引加速查询  （一个索引包含了查询结果中所有的字段）</span><br><span class="line">5 尽量少用like 或者<span class="keyword">or</span></span><br><span class="line">6 不要使用全文索引，如果非要使用可以把全文索引独立出来，建立全文索引服务器</span><br><span class="line">7 关联查询的时候，关联的字段都应该有索引</span><br><span class="line">8 不要使用!=操作，不使用索引</span><br><span class="line">9 查询的时候类型不匹配不使用索引</span><br><span class="line">10 联合索引不带左前缀，不使用索引</span><br><span class="line">11 尽量减少子查询，可以使用关联查询代替子查询</span><br><span class="line">    select count(*) <span class="keyword">from</span> article where uid <span class="keyword">in</span>(select uid <span class="keyword">from</span><span class="built_in"> user </span>where <span class="attribute">id</span>=10)</span><br><span class="line">    select count(*) <span class="keyword">from</span> aticle,user where user.id = aticle.uid   <span class="keyword">and</span> user.<span class="attribute">id</span>=10</span><br><span class="line">    select count(*) <span class="keyword">from</span> aticle join<span class="built_in"> user </span>on user.<span class="attribute">id</span>=article.uid  where userid.<span class="attribute">id</span>=10</span><br><span class="line">12 尽量多试验不同sql语句，比较他们的效率，采用最少</span><br><span class="line">13 不要在where中，运算符左边运算,只要是计算，不采用索引</span><br><span class="line">    select username <span class="keyword">from</span><span class="built_in"> user </span>where age/2&gt;10</span><br><span class="line">14 不要在where中，运算符左边不要出现任何函数,否则不采用索引</span><br><span class="line">   select COUNT(*) <span class="keyword">from</span><span class="built_in"> user </span>where year(birthday) == 1993;</span><br><span class="line">15 不要对<span class="literal">null</span>判断 ，否则不使用索引</span><br><span class="line">16 避免默认排序</span><br><span class="line">    select cid,count(*) <span class="keyword">from</span> bbs<span class="built_in"> group </span>by cid</span><br><span class="line">    select cid,count(*) <span class="keyword">from</span> bbs<span class="built_in"> group </span>by cid order by <span class="literal">null</span> #不排序</span><br></pre></td></tr></table></figure><p>4 其他优化措施</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在应用层面可以nosql技术，把数据保存redius、memcached中加速查询</span><br><span class="line">从架构方面：读写分离</span><br><span class="line">可以使用mysql分区技术，把一个表分为多个文件</span><br><span class="line">分库分表分机器</span><br><span class="line">把表进行垂直切分，或水平切分</span><br></pre></td></tr></table></figure><p>数据库设计 ====》索引 ===》SQL语句优化 ===》分区=》nosql缓存 ==》读写分离=》分库分表分机器（数据库中间件）=》表的垂直/水平切分</p><h2 id="其他技术"><a href="#其他技术" class="headerlink" title="其他技术"></a>其他技术</h2><h3 id="1-存储过程"><a href="#1-存储过程" class="headerlink" title="1. 存储过程"></a>1. 存储过程</h3><h3 id="2-触发器"><a href="#2-触发器" class="headerlink" title="2. 触发器"></a>2. 触发器</h3><h3 id="3-数据分区"><a href="#3-数据分区" class="headerlink" title="3. 数据分区"></a>3. 数据分区</h3><h3 id="4-读写分离"><a href="#4-读写分离" class="headerlink" title="4. 读写分离"></a>4. 读写分离</h3><h3 id="5-主从复制"><a href="#5-主从复制" class="headerlink" title="5. 主从复制"></a>5. 主从复制</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/SorrisiYi/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/SorrisiYi/assets/js
      
    
    </summary>
    
      <category term="数据库" scheme="https://addyzk.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://addyzk.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>网络编程</title>
    <link href="https://addyzk.github.io/2018/08/29/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://addyzk.github.io/2018/08/29/网络编程/</id>
    <published>2018-08-29T12:16:19.000Z</published>
    <updated>2019-05-18T06:10:48.378Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/SorrisiYi/assets/css/APlayer.min.css"><script src="/SorrisiYi/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>计算机之间的通信，三次握手，四次挥手！TCP/UDP协议！</p><h2 id="17-网络编程"><a href="#17-网络编程" class="headerlink" title="17 网络编程"></a>17 网络编程</h2><h2 id="一、网络编程"><a href="#一、网络编程" class="headerlink" title="一、网络编程"></a>一、网络编程</h2><h4 id="1-网络编程基础"><a href="#1-网络编程基础" class="headerlink" title="1.网络编程基础"></a>1.网络编程基础</h4><blockquote><p>计算机网络：把分布在不同区域的计算机通过专门的设备使用通信线路连接起来，从而会形成一个庞大的网络系统，不同的计算机之间就可以进行信息的传递</p><p>网络编程：在同一个网络中不同的机器之间进行通信</p></blockquote><h4 id="2-计算机之间需要通信的条件"><a href="#2-计算机之间需要通信的条件" class="headerlink" title="2.计算机之间需要通信的条件"></a>2.计算机之间需要通信的条件</h4><blockquote><p>三要素：ip地址，端口，协议</p></blockquote><h5 id="2-1-ip地址"><a href="#2-1-ip地址" class="headerlink" title="2.1 ip地址"></a>2.1 ip地址</h5><blockquote><ul><li><p>概念</p><pre><code>互联网地址（Internet Protocol Address），是联网设备和互联网之间的唯一标识，在同一个网段中，ip地址是唯一的ip地址是数字型的，是一个32位整数，通常将其分为4个8位的二进制，每8位用圆点隔开，并且将8位的二进制转换为0~255之间的十进制，例如：10.0.127.108</code></pre></li><li><p>分类</p><pre><code>形式分类：    ipv4:由4个字节组成，分成4段    ipv6:由6个字节组成，分为6段功能分类：    A类：保留给政府机构，1.0.0.1~126.255.255.254    B类：分配给中小型企业，128.1.0.1-191.255.255.254     C类：分配给任何需要的个人，192.0.1.1-223.255.255.254     D类：用于组播【一种数据传输方式】，224.0.0.1-239.255.255.254     E类：用于实验，240....~255.....    127.0.0.1   回送地址，一般指的是本机的ip，localhost，一般用于测试</code></pre></li></ul><p>总结：ip地址可以唯一的确定网络上一个通信实体，但是一个通信实体可以有多个应用程序同时提供网络服务，此时还需要端口</p></blockquote><h5 id="2-2端口"><a href="#2-2端口" class="headerlink" title="2.2端口"></a>2.2端口</h5><blockquote><p>1&gt;概念</p><p>​    数据的发送和接收都需要通过端口出入计算机，端口号是唯一标识通信实体上的应用程序</p><p>​    注意：同一台机器上不能两个程序占用同一个端口，端口号：0~65535</p><p>2&gt;分类</p><p>​    a.公认端口：0~1023   </p><p>​    b.注册端口：1025~49151</p><p>​    c.动态端口或者私有端口：1024~65535</p><p>3&gt;常用的端口</p><p>​    mysql:3306</p><p>​    oracle:1521</p><p>​    tomcat:8080</p><p>​    qq:4000</p></blockquote><h5 id="2-3网络协议"><a href="#2-3网络协议" class="headerlink" title="2.3网络协议"></a>2.3网络协议</h5><blockquote><p>网络协议：只要连接到网络的设备，相互之间遵循同一种网络协议，才能够进行数据交互</p><p><img src="网络模型.gif" alt="网络模型"></p></blockquote><h4 id="3-TCP-IP协议"><a href="#3-TCP-IP协议" class="headerlink" title="3.TCP/IP协议"></a>3.TCP/IP协议</h4><blockquote><p>互联网协议，负责两台计算机之间建立可靠的【保证数据安全到达对方】，可连接【面向连接，三次握手】的通信</p></blockquote><h4 id="4-TCP协议"><a href="#4-TCP协议" class="headerlink" title="4.TCP协议"></a>4.TCP协议</h4><h5 id="4-1概念"><a href="#4-1概念" class="headerlink" title="4.1概念"></a>4.1概念</h5><blockquote><p>Transimission Control Protocol ,传输控制协议，基于字节的传输层通信协议</p><p>特点：</p><p>​    a.安全的【确保接收方完全正确的获取发送方发送的全部数据】</p><p>​    b.面向连接的【数据传输必须要建立连接，连接的过程中需要时间】</p><p>​    c.数据传输的效率较低</p><p>​    d.传输的数据的大小有限制，一旦连接建立，双方可以通过指定的格式发送数据</p><ul><li><p>面向连接：三次握手</p><pre><code>a.客户端向服务端发送一个请求b.服务端收到请求之后，回客户端一个响应c.客户端收到服务端的响应之后，回复给服务端一个确认信息</code></pre></li></ul><p><img src="三次握手.png" alt="三次握手"></p><ul><li>四次挥手    <ul><li>（1） TCP客户端发送一个FIN，用来关闭客户到服务器的数据传送。</li><li>（2） 服务器收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。</li><li>（3） 服务器关闭客户端的连接，发送一个FIN给客户端。</li><li>（4） 客户端发回ACK报文确认，并将确认序号设置为收到序号加1。</li></ul></li></ul><p><img src="四次挥手.png" alt="四次挥手"></p><p>说明：</p><p>​    使用tcp来实现数据的发送和接收需要发送方和接收方，但是两个通信实体之间没有明确的客户端和服务端之分，在两个通信实体建立连接之前，必须有一个通信实体做出主动姿态，被称为客户端</p></blockquote><h5 id="4-2-Socket通信"><a href="#4-2-Socket通信" class="headerlink" title="4.2  Socket通信"></a>4.2  Socket通信</h5><p>​    Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。Socket:套接字，作用：可以发送和接收数据</p><blockquote><p>Socket必须知道目标计算机的ip地址，端口号，指定协议类型【TCP】</p><p><img src="tcp通信.png" alt="tcp通信"></p><p>注意：</p><p>a.同一个端口号，如果被一个socket绑定之后，则其他的socket将不能再绑定</p><p>b.tcp创建连接的是双向通道，谁先发消息，则默认为是客户端，另外一方位服务端</p></blockquote><h4 id="5-UDP协议"><a href="#5-UDP协议" class="headerlink" title="5.UDP协议"></a>5.UDP协议</h4><blockquote><p>User Datagram Protocol,用户数据包协议，提供面向无连接的不可靠的信息传输服务</p><p>特点：</p><p>​    a.不安全【发送方只负责将信息发送出去，数据能不能到达对方，或者到达对方的信息是否正确，都不做任何保证】</p><p>​    b.无连接的【进行信息发送之前，无需进行发送方和接收方之间的连接】</p><p>​    c.速度快</p><p>​    d.大小是有限制的，每个数据包的大小必须限制在64k以内</p><p><img src="udp.png" alt="udp"></p></blockquote><h2 id="二、高阶函数"><a href="#二、高阶函数" class="headerlink" title="二、高阶函数"></a>二、高阶函数</h2><p>如果一个函数的参数是另外一个函数，那么这个函数就可以称为高阶函数</p><h2 id="2-1-map"><a href="#2-1-map" class="headerlink" title="2.1 map"></a>2.1 map</h2><p>map是系统内置函数，map函数接收两个参数，一个是函数，一个是可迭代对象(Iterable)，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">map(function,iterable)</span></span><br><span class="line"><span class="string">参数1：function，函数,函数的参数个数取决于后面序列的个数</span></span><br><span class="line"><span class="string">参数2：iterable，一个序列或多个序列</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">功能：将传入的函数依次作用于序列中的每一个元素，并把结果作为新的Iterator返回</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#1.传入函数一个参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#需求：获取一个列表中每个元素的平方，生成一个新的列表</span></span><br><span class="line">l1 = map(fun,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">print(l1)   <span class="comment">#&lt;map object at 0x000001E86D3DA6D8&gt; #返回的是迭代器</span></span><br><span class="line">print(list(l1))  <span class="comment">#[1, 4, 9, 16]  #将迭代器转换为迭代对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#传入函数2个参数</span></span><br><span class="line">l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">l2 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"><span class="comment">#注意如果两个列表长度不一样，以短的为主计算，函数是平行取值，也就是说x取l1的值，y取l2的值</span></span><br><span class="line">gen1 = map(mul,l1,l2)  <span class="comment">#可以使用lambda表达式</span></span><br><span class="line">print(list(gen1))  <span class="comment">#[2, 6, 12, 20]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取字典的键</span></span><br><span class="line">gen3 = map(<span class="keyword">lambda</span> x:int(x),&#123;<span class="string">'1'</span>:<span class="number">10</span>,<span class="string">'2'</span>:<span class="number">20</span>&#125;)</span><br><span class="line">print(list(gen3)) <span class="comment">#[1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#元组</span></span><br><span class="line">gen4 = map(<span class="keyword">lambda</span> x,y:(x,y),[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(list(gen4))  <span class="comment">#[(1, 1), (2, 2), (3, 3)]</span></span><br></pre></td></tr></table></figure><h2 id="2-2-reduce"><a href="#2-2-reduce" class="headerlink" title="2.2 reduce"></a>2.2 reduce</h2><p>reduce()函数也是functools模块中的一个高阶函数。需要引入functools模块才能使用。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">'''</span><br><span class="line">functools.reduce(f, iterable[, initializer])</span><br><span class="line">参数1：函数，这个函数需要两个参数。</span><br><span class="line">参数2：可迭代对象</span><br><span class="line">参数3：可选，是默认值</span><br><span class="line">返回值：f函数计算的结果</span><br><span class="line">'''</span><br><span class="line">from functools import reduce</span><br><span class="line">#1.累加求和</span><br><span class="line">def add(x,y)</span><br><span class="line"><span class="code">    return x + y</span></span><br><span class="line">print(reduce(f,[1,2,3,4,5],5))</span><br><span class="line">计算过程：</span><br><span class="line"><span class="code"> （1）a = f(1,2)  #将1赋值给x，2赋值给y</span></span><br><span class="line"><span class="code"> （2）a = f(a,3)  #a赋值给x，3赋值给y</span></span><br><span class="line"><span class="code"> （3）a = f(a,4)</span></span><br><span class="line"><span class="code">  (4）a = f(a,5)</span></span><br><span class="line"><span class="code">  (5）f(d,10) = 20</span></span><br><span class="line"></span><br><span class="line">#将序列变成整数</span><br><span class="line">print(reduce(lambda x,y:x*10+y,[9,0,7,8])) #9078</span><br></pre></td></tr></table></figure><h2 id="2-3-filter"><a href="#2-3-filter" class="headerlink" title="2.3 filter"></a>2.3 filter</h2><p>filter是内建函数，可以对可迭代对象进行过滤，去除不满足条件的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">filter(function, iterable) </span><br><span class="line">参数： function 确定是否保留元素，为真保留，为假去除元素,function的值可以<span class="literal">None</span></span><br><span class="line">       iterable 可迭代对象</span><br><span class="line">返回值：一个新的迭代器或迭代对象</span><br><span class="line"><span class="comment">#1 过滤掉非字符串数据</span></span><br><span class="line">print(filter(<span class="keyword">lambda</span> x:isinstance(x,str),[<span class="string">'1'</span>,<span class="number">8</span>,<span class="string">'2'</span>,<span class="number">3</span>,<span class="literal">True</span>,<span class="number">0.9</span>])) </span><br><span class="line">等价于:</span><br><span class="line">  [s <span class="keyword">for</span> s <span class="keyword">in</span> [<span class="string">'1'</span>,<span class="number">8</span>,<span class="string">'2'</span>,<span class="number">3</span>,<span class="literal">True</span>,<span class="number">0.9</span>] <span class="keyword">if</span> isinstance(s,str)]</span><br><span class="line">  </span><br><span class="line"><span class="comment">#2 回文数</span></span><br><span class="line"><span class="comment">#回文数判断</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_palindrome</span><span class="params">(n)</span>:</span></span><br><span class="line">    l1 = list(str(n))  <span class="comment">#将数字转换为字符串，再将字符串转为列表</span></span><br><span class="line">    l2 = l1[::<span class="number">-1</span>] <span class="comment">#获取反向列表</span></span><br><span class="line">    <span class="keyword">if</span> l1 == l2:  <span class="comment">#列表比较,长度相同，每一个元素都相同则为真</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#找出1-1000内所有的回文数</span></span><br><span class="line">print(list(filter(is_palindrome,range(<span class="number">1</span>,<span class="number">1001</span>))))</span><br></pre></td></tr></table></figure><h2 id="2-4-sorted"><a href="#2-4-sorted" class="headerlink" title="2.4 sorted"></a>2.4 sorted</h2><p>sorted是内建函数，用于对有序序列进行排序，生成一个新序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sorted(iterable[, key=<span class="literal">None</span>][, reverse=<span class="literal">False</span>]) </span><br><span class="line">参数：iterable  排序对象，可以列表、元组、字符串等有序序列</span><br><span class="line">      key 一个函数，作用于序列的每一个元素，根据函数返回值进行排序，</span><br><span class="line">           具体的函数的参数就是取自于可迭代对象中，</span><br><span class="line">      reverse 默认从小到大排序，如果reverse为<span class="literal">True</span>则从大到小排序</span><br><span class="line">返回值： 新的序列</span><br><span class="line"><span class="comment">#字符串排序</span></span><br><span class="line">print(sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower)) <span class="comment">#指定把元素变为小写后再排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多维数据排序</span></span><br><span class="line">l=[(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'c'</span>, <span class="number">6</span>), (<span class="string">'d'</span>, <span class="number">4</span>), (<span class="string">'e'</span>, <span class="number">3</span>)]</span><br><span class="line">print(sorted(l,key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>]))  <span class="comment">#使用元组的第二个元素排序</span></span><br><span class="line"></span><br><span class="line">students = [&#123;<span class="string">'name'</span>:<span class="string">'abc'</span>,<span class="string">'gender'</span>:<span class="string">'男'</span>,<span class="string">'age'</span>:<span class="number">23</span>&#125; ,</span><br><span class="line">            &#123;<span class="string">'name'</span>: <span class="string">'kkd'</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>, <span class="string">'age'</span>: <span class="number">19</span>&#125; ,</span><br><span class="line">            &#123;<span class="string">'name'</span>: <span class="string">'ccxsbc'</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;]</span><br><span class="line">print(sorted(students,key=<span class="keyword">lambda</span> elem:elem[<span class="string">'age'</span>]))  <span class="comment">#指定用age排序</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/SorrisiYi/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/SorrisiYi/assets/js
      
    
    </summary>
    
      <category term="web" scheme="https://addyzk.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://addyzk.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="https://addyzk.github.io/2018/05/12/redis/"/>
    <id>https://addyzk.github.io/2018/05/12/redis/</id>
    <published>2018-05-12T13:10:35.000Z</published>
    <updated>2019-05-17T13:33:28.218Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/SorrisiYi/assets/css/APlayer.min.css"><script src="/SorrisiYi/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="redis教程："><a href="#redis教程：" class="headerlink" title="redis教程："></a>redis教程：</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>redis</code>是一种支持分布式的<code>nosql</code>数据库,他的数据是保存在内存中，同时<code>redis</code>可以定时把内存数据同步到磁盘，即可以将数据持久化，并且他比<code>memcached</code>支持更多的数据结构(<code>string</code>,<code>list列表[队列和栈]</code>,<code>set[集合]</code>,<code>sorted set[有序集合]</code>,<code>hash(hash表)</code>)。相关参考文档：<a href="http://redisdoc.com/index.html" target="_blank" rel="noopener">http://redisdoc.com/index.html</a></p><h2 id="redis使用场景："><a href="#redis使用场景：" class="headerlink" title="redis使用场景："></a>redis使用场景：</h2><ol><li>登录会话存储：存储在<code>redis</code>中，与<code>memcached</code>相比，数据不会丢失。</li><li>排行版/计数器：比如一些秀场类的项目，经常会有一些前多少名的主播排名。还有一些文章阅读量的技术，或者新浪微博的点赞数等。</li><li>作为消息队列：比如<code>celery</code>就是使用<code>redis</code>作为中间人。</li><li>当前在线人数：还是之前的秀场例子，会显示当前系统有多少在线人数。</li><li>一些常用的数据缓存：比如我们的<code>BBS</code>论坛，板块不会经常变化的，但是每次访问首页都要从<code>mysql</code>中获取，可以在<code>redis</code>中缓存起来，不用每次请求数据库。</li><li>把前200篇文章缓存或者评论缓存：一般用户浏览网站，只会浏览前面一部分文章或者评论，那么可以把前面200篇文章和对应的评论缓存起来。用户访问超过的，就访问数据库，并且以后文章超过200篇，则把之前的文章删除。</li><li>好友关系：微博的好友关系使用<code>redis</code>实现。</li><li>发布和订阅功能：可以用来做聊天软件。</li></ol><h2 id="redis和memcached的比较："><a href="#redis和memcached的比较：" class="headerlink" title="redis和memcached的比较："></a><code>redis</code>和<code>memcached</code>的比较：</h2><table><thead><tr><th></th><th>memcached</th><th>redis</th></tr></thead><tbody><tr><td>类型</td><td>纯内存数据库</td><td>内存磁盘同步数据库</td></tr><tr><td>数据类型</td><td>在定义value时就要固定数据类型</td><td>不需要</td></tr><tr><td>虚拟内存</td><td>不支持</td><td>支持</td></tr><tr><td>过期策略</td><td>支持</td><td>支持</td></tr><tr><td>存储数据安全</td><td>不支持</td><td>可以将数据同步到dump.db中</td></tr><tr><td>灾难恢复</td><td>不支持</td><td>可以将磁盘中的数据恢复到内存中</td></tr><tr><td>分布式</td><td>支持</td><td>主从同步</td></tr><tr><td>订阅与发布</td><td>不支持</td><td>支持</td></tr></tbody></table><h2 id="redis在ubuntu系统中的安装与启动"><a href="#redis在ubuntu系统中的安装与启动" class="headerlink" title="redis在ubuntu系统中的安装与启动"></a><code>redis</code>在<code>ubuntu</code>系统中的安装与启动</h2><ol><li><p>安装：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install redis-server</span><br></pre></td></tr></table></figure></li><li><p>卸载：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> purge --auto-<span class="builtin-name">remove</span> redis-server</span><br></pre></td></tr></table></figure></li><li><p>启动：<code>redis</code>安装后，默认会自动启动，可以通过以下命令查看：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> aux|<span class="keyword">grep</span> redis</span><br></pre></td></tr></table></figure><p>如果想自己手动启动，可以通过以下命令进行启动：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>redis-server start</span><br></pre></td></tr></table></figure></li><li><p>停止：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>redis-server stop</span><br></pre></td></tr></table></figure></li></ol><h2 id="redis在windows系统中的安装与启动："><a href="#redis在windows系统中的安装与启动：" class="headerlink" title="redis在windows系统中的安装与启动："></a>redis在windows系统中的安装与启动：</h2><ol><li>下载：redis官方是不支持windows操作系统的。但是微软的开源部门将redis移植到了windows上。因此下载地址不是在redis官网上。而是在github上：<a href="https://github.com/MicrosoftArchive/redis/releases。" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases。</a></li><li>安装：点击一顿下一步安装就可以了。</li><li>运行：进入到<code>redis</code>安装所在的路径然后执行<code>redis-server.exe redis.windows.conf</code>就可以运行了。</li><li>连接：<code>redis</code>和<code>mysql</code>以及<code>mongo</code>是一样的，都提供了一个客户端进行连接。输入命令<code>redis-cli</code>（前提是redis安装路径已经加入到环境变量中了）就可以连接到<code>redis</code>服务器了。</li></ol><h2 id="其他机器访问本机redis服务器："><a href="#其他机器访问本机redis服务器：" class="headerlink" title="其他机器访问本机redis服务器："></a>其他机器访问本机redis服务器：</h2><p>想要让其他机器访问本机的redis服务器。那么要修改redis.conf的配置文件，将bind改成<code>bind [自己的ip地址或者0.0.0.0]</code>，其他机器才能访问。<br><strong>注意：bind绑定的是本机网卡的ip地址，而不是想让其他机器连接的ip地址。如果有多块网卡，那么可以绑定多个网卡的ip地址。如果绑定到额是0.0.0.0，那么意味着其他机器可以通过本机所有的ip地址进行访问。</strong></p><h2 id="对redis的操作"><a href="#对redis的操作" class="headerlink" title="对redis的操作"></a>对<code>redis</code>的操作</h2><p>对<code>redis</code>的操作可以用两种方式，第一种方式采用<code>redis-cli</code>，第二种方式采用编程语言，比如<code>Python</code>、<code>PHP</code>和<code>JAVA</code>等。</p><ol><li><p>使用<code>redis-cli</code>对<code>redis</code>进行字符串操作：</p></li><li><p>启动<code>redis</code>：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>redis-server start</span><br></pre></td></tr></table></figure></li><li><p>连接上</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h <span class="string">[ip]</span> -p <span class="string">[端口]</span></span><br></pre></td></tr></table></figure></li><li><p>添加：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> key <span class="comment">value</span></span><br><span class="line">如：</span><br><span class="line"><span class="keyword">set</span> <span class="comment">username xiaotuo</span></span><br></pre></td></tr></table></figure><p>将字符串值<code>value</code>关联到<code>key</code>。如果<code>key</code>已经持有其他值，<code>set</code>命令就覆写旧值，无视其类型。并且默认的过期时间是永久，即永远不会过期。</p></li><li><p>删除：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">del</span> key</span><br><span class="line">如：</span><br><span class="line"><span class="selector-tag">del</span> username</span><br></pre></td></tr></table></figure></li><li><p>设置过期时间：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expire key <span class="keyword">timeout</span>(单位为秒)</span><br></pre></td></tr></table></figure><p>也可以在设置值的时候，一同指定过期时间：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">key</span> <span class="keyword">value</span> EX <span class="keyword">timeout</span></span><br><span class="line">或：</span><br><span class="line">setex <span class="keyword">key</span> <span class="keyword">timeout</span> <span class="keyword">value</span></span><br></pre></td></tr></table></figure></li><li><p>查看过期时间：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ttl <span class="built_in">key</span></span><br><span class="line">如：</span><br><span class="line">ttl username</span><br></pre></td></tr></table></figure></li><li><p>查看当前<code>redis</code>中的所有<code>key</code>：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">keys</span> *</span><br></pre></td></tr></table></figure></li><li><p>列表操作：</p><ul><li><p>在列表左边添加元素：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lpush <span class="built_in">key</span> <span class="built_in">value</span></span><br></pre></td></tr></table></figure><p>将值<code>value</code>插入到列表<code>key</code>的表头。如果<code>key</code>不存在，一个空列表会被创建并执行<code>lpush</code>操作。当<code>key</code>存在但不是列表类型时，将返回一个错误。</p></li><li><p>在列表右边添加元素：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpush <span class="built_in">key</span> <span class="built_in">value</span></span><br></pre></td></tr></table></figure><p>将值value插入到列表key的表尾。如果key不存在，一个空列表会被创建并执行RPUSH操作。当key存在但不是列表类型时，返回一个错误。</p></li><li><p>查看列表中的元素：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lrange</span> key start stop</span><br></pre></td></tr></table></figure><p>返回列表<code>key</code>中指定区间内的元素，区间以偏移量<code>start</code>和<code>stop</code>指定,如果要左边的第一个到最后的一个<code>lrange key 0 -1</code>。</p></li><li><p>移除列表中的元素：</p><ul><li><p>移除并返回列表<code>key</code>的头元素：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lpop key</span></span><br></pre></td></tr></table></figure></li><li><p>移除并返回列表的尾元素：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rpop key</span></span><br></pre></td></tr></table></figure></li><li><p>移除并返回列表<code>key</code>的中间元素：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrem <span class="built_in">key</span> <span class="built_in">count</span> <span class="built_in">value</span></span><br></pre></td></tr></table></figure><p>将删除<code>key</code>这个列表中，<code>count</code>个值为<code>value</code>的元素。</p></li></ul></li><li><p>指定返回第几个元素：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lindex</span> key index</span><br></pre></td></tr></table></figure><p>将返回<code>key</code>这个列表中，索引为<code>index</code>的这个元素。</p></li><li><p>获取列表中的元素个数：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">llen </span>key</span><br><span class="line">如：</span><br><span class="line"><span class="keyword">llen </span>languages</span><br></pre></td></tr></table></figure></li><li><p>删除指定的元素：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lrem <span class="built_in">key</span> <span class="built_in">count</span> <span class="built_in">value</span></span><br><span class="line">如：</span><br><span class="line">lrem languages <span class="number">0</span> php</span><br></pre></td></tr></table></figure><p>根据参数 count 的值，移除列表中与参数 value 相等的元素。<code>count</code>的值可以是以下几种：</p><ul><li>count &gt; 0：从表头开始向表尾搜索，移除与<code>value</code>相等的元素，数量为<code>count</code>。</li><li>count &lt; 0：从表尾开始向表头搜索，移除与 <code>value</code>相等的元素，数量为<code>count</code>的绝对值。</li><li>count = 0：移除表中所有与<code>value</code> 相等的值。</li></ul></li></ul></li><li><p><code>set</code>集合的操作：</p><ul><li><p>添加元素：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">sadd</span></span> <span class="keyword">set</span> value1 <span class="comment">value2....</span></span><br><span class="line">如：</span><br><span class="line">sadd <span class="comment">team xiaotuo datuo</span></span><br></pre></td></tr></table></figure></li><li><p>查看元素：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">smembers <span class="keyword">set</span></span><br><span class="line">如：</span><br><span class="line">smembers <span class="comment">team</span></span><br></pre></td></tr></table></figure></li><li><p>移除元素：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">srem</span></span> <span class="keyword">set</span> member...</span><br><span class="line">如：</span><br><span class="line">srem <span class="comment">team xiaotuo datuo</span></span><br></pre></td></tr></table></figure></li><li><p>查看集合中的元素个数：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scard <span class="keyword">set</span></span><br><span class="line">如：</span><br><span class="line">scard <span class="comment">team1</span></span><br></pre></td></tr></table></figure></li><li><p>获取多个集合的交集：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sinter <span class="keyword">set</span>1 <span class="keyword">set</span>2</span><br><span class="line">如：</span><br><span class="line">sinter team1 team2</span><br></pre></td></tr></table></figure></li><li><p>获取多个集合的并集：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sunion <span class="keyword">set</span>1 <span class="keyword">set</span>2</span><br><span class="line">如：</span><br><span class="line">sunion team1 team2</span><br></pre></td></tr></table></figure></li><li><p>获取多个集合的差集：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sdiff set<span class="number">1</span> set<span class="number">2</span></span><br><span class="line">如：</span><br><span class="line">sdiff tea<span class="name">m1</span> tea<span class="name">m2</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>hash</code>哈希操作：</p><ul><li><p>添加一个新值：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">hset</span> key <span class="meta">field</span> value</span><br><span class="line">如：</span><br><span class="line"><span class="symbol">hset</span> website <span class="keyword">baidu </span><span class="keyword">baidu.com</span></span><br></pre></td></tr></table></figure><p>将哈希表<code>key</code>中的域<code>field</code>的值设为<code>value</code>。<br>如果<code>key</code>不存在，一个新的哈希表被创建并进行 <code>HSET</code>操作。如果域 <code>field</code>已经存在于哈希表中，旧值将被覆盖。</p></li><li><p>获取哈希中的<code>field</code>对应的值：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">hget</span> key <span class="meta">field</span></span><br><span class="line">如：</span><br><span class="line"><span class="symbol">hget</span> website <span class="keyword">baidu</span></span><br></pre></td></tr></table></figure></li><li><p>删除<code>field</code>中的某个<code>field</code>：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hdel</span> <span class="built_in">key</span> field</span><br><span class="line">如：</span><br><span class="line"><span class="built_in">hdel</span> website baidu</span><br></pre></td></tr></table></figure></li><li><p>获取某个哈希中所有的<code>field</code>和<code>value</code>：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hgetall <span class="built_in">key</span></span><br><span class="line">如：</span><br><span class="line">hgetall website</span><br></pre></td></tr></table></figure></li><li><p>获取某个哈希中所有的<code>field</code>：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hkeys <span class="built_in">key</span></span><br><span class="line">如：</span><br><span class="line">hkeys website</span><br></pre></td></tr></table></figure></li><li><p>获取某个哈希中所有的值：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hvals <span class="built_in">key</span></span><br><span class="line">如：</span><br><span class="line">hvals website</span><br></pre></td></tr></table></figure></li><li><p>判断哈希中是否存在某个<code>field</code>：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">hexists</span> key <span class="meta">field</span></span><br><span class="line">如：</span><br><span class="line"><span class="symbol">hexists</span> website <span class="keyword">baidu</span></span><br></pre></td></tr></table></figure></li><li><p>获取哈希中总共的键值对：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">hlen</span> <span class="meta">field</span></span><br><span class="line">如：</span><br><span class="line"><span class="symbol">hlen</span> website</span><br></pre></td></tr></table></figure></li></ul></li><li><p>事务操作：Redis事务可以一次执行多个命令，事务具有以下特征：</p><ul><li><p>隔离操作：事务中的所有命令都会序列化、按顺序地执行，不会被其他命令打扰。</p></li><li><p>原子操作：事务中的命令要么全部被执行，要么全部都不执行。</p></li><li><p>开启一个事务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">multi</span></span><br></pre></td></tr></table></figure><p>以后执行的所有命令，都在这个事务中执行的。</p></li><li><p>执行事务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span></span><br></pre></td></tr></table></figure><p>会将在<code>multi</code>和<code>exec</code>中的操作一并提交。</p></li><li><p>取消事务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">discard</span></span><br></pre></td></tr></table></figure><p>会将<code>multi</code>后的所有命令取消。</p></li><li><p>监视一个或者多个<code>key</code>：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">watch</span></span> key...</span><br></pre></td></tr></table></figure><p>监视一个(或多个)key，如果在事务执行之前这个(或这些) key被其他命令所改动，那么事务将被打断。</p></li><li><p>取消所有<code>key</code>的监视：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">unwatch</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>发布/订阅操作：</p><ul><li><p>给某个频道发布消息：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publish channel <span class="keyword">message</span></span><br></pre></td></tr></table></figure></li><li><p>订阅某个频道的消息：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">subscribe </span>channel</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/SorrisiYi/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/SorrisiYi/assets/js
      
    
    </summary>
    
      <category term="数据库" scheme="https://addyzk.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="redis" scheme="https://addyzk.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>项目部署</title>
    <link href="https://addyzk.github.io/2018/04/27/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <id>https://addyzk.github.io/2018/04/27/项目部署/</id>
    <published>2018-04-27T11:36:50.000Z</published>
    <updated>2019-05-18T06:10:42.171Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/SorrisiYi/assets/css/APlayer.min.css"><script src="/SorrisiYi/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、项目部署基本流程"><a href="#一、项目部署基本流程" class="headerlink" title="一、项目部署基本流程"></a>一、项目部署基本流程</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>虚拟环境</span><br><span class="line"><span class="bullet">- </span>数据库</span><br><span class="line"><span class="bullet">- </span>项目上传</span><br><span class="line"><span class="bullet">- </span>项目依赖</span><br><span class="line"><span class="bullet">- </span>数据迁移</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>Nginx</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>uWSGI</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>Nginx和uWSGI对接</span><br></pre></td></tr></table></figure><h2 id="二、虚拟环境"><a href="#二、虚拟环境" class="headerlink" title="二、虚拟环境"></a>二、虚拟环境</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、安装</span></span><br><span class="line">pip install virtualenv</span><br><span class="line">pip install virtualenvwrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、查看</span></span><br><span class="line">type virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、配置</span></span><br><span class="line">vi ~/.bashrc</span><br><span class="line"># 文件最后添加:</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">WORKON_HOME</span>=~/.virtualenv</span><br><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、创建对应目录</span></span><br><span class="line">mkdir ~/.virtualenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、刷新环境</span></span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、创建虚拟环境</span></span><br><span class="line">mkvirtualenv axf -p /usr/bin/python3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、检测</span></span><br></pre></td></tr></table></figure><blockquote><p>注意: sudo apt install virtualenvwrapper</p></blockquote><h2 id="三、数据库"><a href="#三、数据库" class="headerlink" title="三、数据库"></a>三、数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、安装</span></span><br><span class="line">apt <span class="keyword">install</span> mysql-<span class="keyword">server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、设置开机自启动</span></span><br><span class="line">systemctl <span class="keyword">enable</span> mysql    </span><br><span class="line">[<span class="keyword">enable</span>、<span class="keyword">disable</span>、<span class="keyword">start</span>、<span class="keyword">stop</span>、restart、<span class="keyword">status</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、测试</span></span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><blockquote><p>注意: <code>apt update</code>更新源操作</p></blockquote><h2 id="四、项目上传"><a href="#四、项目上传" class="headerlink" title="四、项目上传"></a>四、项目上传</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一: scp命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二: Github</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式三: pycharm自动工具</span></span><br><span class="line"><span class="comment"># 服务器创建项目目录</span></span><br><span class="line">mkdir <span class="regexp">/var/</span>www<span class="regexp">/axf/</span> -p</span><br><span class="line"><span class="comment"># 配置pycharm</span></span><br></pre></td></tr></table></figure><h2 id="五、项目依赖"><a href="#五、项目依赖" class="headerlink" title="五、项目依赖"></a>五、项目依赖</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 生成依赖文件</span></span><br><span class="line">pip freeze &gt; reqirement.txt</span><br><span class="line"></span><br><span class="line"><span class="meta"># 安装依赖</span></span><br><span class="line">pip install -r reqirement.txt</span><br></pre></td></tr></table></figure><h2 id="六、数据迁移"><a href="#六、数据迁移" class="headerlink" title="六、数据迁移"></a>六、数据迁移</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 备份</span></span><br><span class="line">mysqldump -uroot -p python1812axf &gt; dir/python1812axf.sql</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database python1812axf charset=utf8;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use python1812axf;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">source</span> /var/www/axf/dir/python1812axf.sql</span></span><br></pre></td></tr></table></figure><blockquote><p>注意: 修改Django的数据库配置</p></blockquote><h2 id="七、启动项目"><a href="#七、启动项目" class="headerlink" title="七、启动项目"></a>七、启动项目</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 启动</span></span><br><span class="line">python manager.py runserver <span class="number">0</span>:<span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 浏览器查看</span></span><br></pre></td></tr></table></figure><h2 id="八、Nginx"><a href="#八、Nginx" class="headerlink" title="八、Nginx"></a>八、Nginx</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 1、获取 key</span></span><br><span class="line">wget https:<span class="comment">//nginx.org/keys/nginx_signing.key</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 2、添加key</span></span><br><span class="line">sudo apt-key add nginx_signing.key</span><br><span class="line"></span><br><span class="line"><span class="meta"># 3、添加源</span></span><br><span class="line">echo <span class="string">"deb http://nginx.org/packages/ubuntu `lsb_release -cs` nginx"</span> \</span><br><span class="line">    | sudo tee /etc/apt/sources.list.d/nginx.list</span><br><span class="line">    </span><br><span class="line">echo <span class="string">"deb http://nginx.org/packages/mainline/ubuntu `lsb_release -cs` nginx"</span> \</span><br><span class="line">    | sudo tee /etc/apt/sources.list.d/nginx.list</span><br><span class="line"></span><br><span class="line"><span class="meta"># 4、更新源</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="meta"># 5、安装nginx</span></span><br><span class="line">apt install nginx</span><br><span class="line"></span><br><span class="line"><span class="meta"># 6、设置开机自启动</span></span><br><span class="line">systemctl enable nginx</span><br><span class="line"></span><br><span class="line"><span class="meta"># 7、设置启动</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"></span><br><span class="line"><span class="meta"># 8、查看状态</span></span><br><span class="line">systemctl status nginx</span><br><span class="line"></span><br><span class="line"><span class="meta"># 9、测试</span></span><br><span class="line">浏览器中访问自己的IP</span><br></pre></td></tr></table></figure><blockquote><p>备注: 能访问，即表示Nginx安装成功</p></blockquote><h2 id="九、Nginx配置1"><a href="#九、Nginx配置1" class="headerlink" title="九、Nginx配置1"></a>九、Nginx配置1</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 配置文件所在位置 /etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 拷贝(备份)</span></span><br><span class="line">cp nginx.conf nginx.conf.temp</span><br><span class="line"></span><br><span class="line"><span class="meta"># 编辑文件</span></span><br><span class="line">http&#123;</span><br><span class="line">    <span class="meta"># <span class="meta-keyword">include</span> /etc/nginx/conf.d/*.conf;</span></span><br><span class="line">    <span class="class">server </span>&#123;</span><br><span class="line">        location /<span class="class">static </span>&#123;</span><br><span class="line">            alias <span class="meta-keyword">/var/</span>www<span class="meta-keyword">/axf/</span>static;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 杀死服务</span></span><br><span class="line">pkill <span class="number">-9</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="meta"># 检查是否杀死服务</span></span><br><span class="line">ps -ef | grep nginx</span><br><span class="line"></span><br><span class="line"><span class="meta"># 指定配置文件启动</span></span><br><span class="line">nginx -c nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="meta"># 检查</span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//39.98.84.248/static/base/img/home.png</span></span><br></pre></td></tr></table></figure><h2 id="十、uWSGI"><a href="#十、uWSGI" class="headerlink" title="十、uWSGI"></a>十、uWSGI</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">要注意 WSGI / uwsgi / uWSGI 这三个概念的区分。</span><br><span class="line">    WSGI是一种通信协议。</span><br><span class="line">    uwsgi是一种线路协议而不是通信协议，在此常用于在uWSGI服务器与其他网络服务器的数据通信。</span><br><span class="line">    而uWSGI是实现了uwsgi和WSGI两种协议的Web服务器。</span><br><span class="line">uwsgi协议是一个uWSGI服务器自有的协议，它用于定义传输信息的类型（<span class="keyword">type</span> <span class="type">of </span>information），每一个uwsgi packet前<span class="number">4</span>byte为传输信息类型描述，它与WSGI相比是两样东西。</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装前   （python3欠缺的 apt install python3-dev）</span></span><br><span class="line">pip install uwsgi</span><br><span class="line"></span><br><span class="line"><span class="comment">########## django 配置.ini</span></span><br><span class="line">[uwsgi]</span><br><span class="line"><span class="comment"># 直接作为web服务器使用</span></span><br><span class="line"><span class="attribute">http</span>=0.0.0.0:8030</span><br><span class="line"><span class="comment"># 配置工程目录</span></span><br><span class="line"><span class="attribute">chdir</span>=/var/www/axf</span><br><span class="line"><span class="comment"># wsgi文件</span></span><br><span class="line"><span class="comment"># /var/www/axf/Python181AXF/wsgi.py</span></span><br><span class="line"><span class="attribute">wsgi-file</span>=Python181AXF/wsgi.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程数量</span></span><br><span class="line"><span class="attribute">processes</span>=1</span><br><span class="line"><span class="comment"># 线程</span></span><br><span class="line"><span class="attribute">theads</span>=2</span><br><span class="line"><span class="comment"># 使能</span></span><br><span class="line"><span class="attribute">enable-theads</span>=<span class="literal">True</span></span><br><span class="line"><span class="comment"># PID文件</span></span><br><span class="line"><span class="attribute">pidfile</span>=uwsgi.pid</span><br><span class="line"><span class="comment"># 日志文件</span></span><br><span class="line"><span class="attribute">daemonize</span>=uwsgi.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######### flask配置</span></span><br><span class="line">[uwsgi]</span><br><span class="line"><span class="attribute">socket</span>=0.0.0.0:8030</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置工程目录</span></span><br><span class="line"><span class="attribute">chdir</span>=/var/www/flask</span><br><span class="line"><span class="comment"># 入口文件</span></span><br><span class="line"><span class="attribute">wsgi-file</span>=manage.py</span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attribute">callable</span>=app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程数量</span></span><br><span class="line"><span class="attribute">processes</span>=1</span><br><span class="line"><span class="comment"># 线程</span></span><br><span class="line"><span class="attribute">theads</span>=2</span><br><span class="line"><span class="comment"># 使能</span></span><br><span class="line"><span class="attribute">enable-theads</span>=<span class="literal">True</span></span><br><span class="line"><span class="comment"># PID文件</span></span><br><span class="line"><span class="attribute">pidfile</span>=uwsgi.pid</span><br><span class="line"><span class="comment"># 日志文件</span></span><br><span class="line"><span class="attribute">daemonize</span>=uwsgi.log</span><br></pre></td></tr></table></figure><blockquote><p>备注: 必须是安装在对应的虚拟环境中!<br>报错: 因为python3开发环境不完整有部分包是欠缺的 <code>apt install python3-dev</code></p></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 启动</span></span><br><span class="line">uwsgi --ini uwsgi.ini</span><br><span class="line"></span><br><span class="line"><span class="meta"># 停止</span></span><br><span class="line">pkill <span class="number">-9</span> uwsgi</span><br><span class="line"></span><br><span class="line"><span class="meta"># 检查是否杀死服务</span></span><br><span class="line">ps -ef | grep uwsgi</span><br><span class="line"></span><br><span class="line"><span class="meta"># 再启动  uwsgi --ini uwsgi.ini</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 检查是否启动Django项目成功 (没有样式的)</span></span><br><span class="line">http:<span class="comment">//39.98.84.248:8020/axf/</span></span><br></pre></td></tr></table></figure><h2 id="十一、Nginx和uWSGI对接"><a href="#十一、Nginx和uWSGI对接" class="headerlink" title="十一、Nginx和uWSGI对接"></a>十一、Nginx和uWSGI对接</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">############ uWSGI配置更改</span><br><span class="line"># 直接作为web服务器使用</span><br><span class="line"># http=<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8030</span></span><br><span class="line"># 对接nginx</span><br><span class="line">socket=<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8030</span></span><br><span class="line"></span><br><span class="line">############ nginx.conf配置</span><br><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">    <span class="comment">//listen 82;  新项目新端口</span></span><br><span class="line"><span class="comment">//server_name 112.74.175.33:81; ip地址</span></span><br><span class="line">location / &#123;</span><br><span class="line">            include /etc/nginx/uwsgi_params;</span><br><span class="line">            uwsgi_pass <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8030</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般配置正确之后还显示502错误的话，可能是没有数据库权限，看看数据库用户需不需要创建！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/SorrisiYi/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/SorrisiYi/assets/js
      
    
    </summary>
    
      <category term="nginx部署" scheme="https://addyzk.github.io/categories/nginx%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="web" scheme="https://addyzk.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Git!</title>
    <link href="https://addyzk.github.io/2018/04/23/git/"/>
    <id>https://addyzk.github.io/2018/04/23/git/</id>
    <published>2018-04-23T12:11:14.000Z</published>
    <updated>2019-05-18T06:10:35.181Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/SorrisiYi/assets/css/APlayer.min.css"><script src="/SorrisiYi/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Git 的基本认识，常用命令，以及使用流程，冲突管理分支管理等。</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="1-git简介"><a href="#1-git简介" class="headerlink" title="1.git简介"></a>1.git简介</h3><p><img src="git.png" alt="image"><br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>workspace 工作区</span><br><span class="line"><span class="bullet">- </span>index 暂存区</span><br><span class="line"><span class="bullet">- </span>repository 本地版本库</span><br><span class="line"><span class="bullet">- </span>remote 远程仓库</span><br></pre></td></tr></table></figure></p><h3 id="2-常用git命令"><a href="#2-常用git命令" class="headerlink" title="2.常用git命令"></a>2.常用git命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所有的git命令必须在工作区内能使用，工作区就是你的项目目录</span><br></pre></td></tr></table></figure><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">   -<span class="ruby"> git --version 查看版本</span></span><br><span class="line"><span class="ruby">   - .gitignore  文件可以过滤不想提交的文件夹或文件</span></span><br><span class="line"><span class="ruby">- git config -l 查看配置信息</span></span><br><span class="line"><span class="ruby">- 修改name和email </span></span><br><span class="line"><span class="ruby">    - git config --global user.name <span class="string">'ddd'</span></span></span><br><span class="line"><span class="ruby">    - git config --global user.email <span class="string">'ddd@jdjdjd.com'</span></span></span><br><span class="line"><span class="ruby">    - git config --global push.default matching</span></span><br><span class="line"><span class="ruby">- 克隆版本库  </span></span><br><span class="line"><span class="ruby">    - git clone 版本库地址     将远端服务上的项目克隆到本地</span></span><br><span class="line"><span class="ruby">- 创建版本库 </span></span><br><span class="line"><span class="ruby">    - git init   初始化一个新的项目 ，必须切换到版本库所在目录 </span></span><br><span class="line"><span class="ruby">- 将文件添加到暂存区</span></span><br><span class="line"><span class="ruby">    - git add 文件名     将指定文件添加到暂存区</span></span><br><span class="line"><span class="ruby">    - git add .          将所有文件添加到暂存区</span></span><br><span class="line"><span class="ruby">    - git reset HEAD &lt;file&gt;  撤销暂存区的修改</span></span><br><span class="line"><span class="ruby">- 查看修改</span></span><br><span class="line"><span class="ruby">    - git diff</span></span><br><span class="line"><span class="ruby">- 提交代码到版本库</span></span><br><span class="line"><span class="ruby">    -  git commit &lt;文件名&gt;    -m <span class="string">"说明信息"</span></span></span><br><span class="line"><span class="ruby">    -  git commit -a -m    提交所有文件</span></span><br><span class="line"><span class="ruby">- 将本地代码推送到远端托管服务器</span></span><br><span class="line"><span class="ruby">    - git push [origin master] 默认推送到主分支</span></span><br><span class="line"><span class="ruby">    - git push origin 分支名     推送到指定分支</span></span><br><span class="line"><span class="ruby">- 从远端服务器拉取内容</span></span><br><span class="line"><span class="ruby">    - git pull origin 分支名</span></span><br><span class="line"><span class="ruby">    - --allow-unrelated-histories  解决本地和远程库不同的问题</span></span><br><span class="line"><span class="ruby">- 删除或恢复文件</span></span><br><span class="line"><span class="ruby">    - git rm &lt;file&gt;  从版本库中删除文件</span></span><br><span class="line"><span class="ruby">    - git checkout -- &lt;file&gt; 从版本库中恢复一个文件</span></span><br><span class="line"><span class="ruby">- 查看版本库状态</span></span><br><span class="line"><span class="ruby">    - git status</span></span><br><span class="line"><span class="ruby">- 查看提交记录</span></span><br><span class="line"><span class="ruby">    - git log</span></span><br><span class="line"><span class="ruby">    - git log --pretty=oneline</span></span><br><span class="line"><span class="ruby">      -版本回退</span></span><br><span class="line"><span class="ruby">    - git reset --hard head~n</span></span><br><span class="line"><span class="ruby">        - head~ 上一个版本</span></span><br><span class="line"><span class="ruby">        - head~~上两个版本</span></span><br><span class="line"><span class="ruby">        - head~n 上n版本</span></span><br><span class="line"><span class="ruby">    - git reset --hard 版本号</span></span><br><span class="line"><span class="ruby">    - git reflog 查看每个版本的版本号</span></span><br></pre></td></tr></table></figure><h3 id="3-git使用流程"><a href="#3-git使用流程" class="headerlink" title="3.git使用流程"></a>3.git使用流程</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 首先到托管服务器上创建一个空版本库，例如在github、coding、oschina等</span></span><br><span class="line"><span class="ruby">- 然后克隆到本地(clone)创建一个新项目</span></span><br><span class="line"><span class="ruby">- 或者可以通过初始化项目创建一个新项目 git init</span></span><br><span class="line"><span class="ruby">    - git remote add origin 远程仓库地址 </span></span><br><span class="line"><span class="ruby">- 添加代码文件（git add)</span></span><br><span class="line"><span class="ruby">- 提交代码到本地库 git commit -m</span></span><br><span class="line"><span class="ruby">- 将代码推送到远端服务器 git push</span></span><br><span class="line"><span class="ruby">- 从远端服务器拉取代码git  pull</span></span><br></pre></td></tr></table></figure><h4 id="4-冲突管理"><a href="#4-冲突管理" class="headerlink" title="4 冲突管理"></a>4 冲突管理</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>如果有多个人同时修改同一个文件的相同行，在推送时会有冲突</span><br><span class="line"><span class="bullet">- </span>发生冲突后，首先将服务器端代码拉到本地（pull），手动合并冲突</span><br><span class="line"><span class="bullet">- </span>然后添加修改后的代码文件，重新提交</span><br><span class="line"><span class="bullet">- </span>将代码推送到服务器</span><br></pre></td></tr></table></figure><h4 id="5-分支管理"><a href="#5-分支管理" class="headerlink" title="5 分支管理"></a>5 分支管理</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> master 主分支，记录发布版本</span></span><br><span class="line"><span class="ruby">- online 线上分支 正在运行的版本</span></span><br><span class="line"><span class="ruby">- develop 开发分支 用于测试</span></span><br><span class="line"><span class="ruby">- local 本地分支</span></span><br><span class="line"><span class="ruby">- 分支管理常用命令</span></span><br><span class="line"><span class="ruby">    - git branch 查看分支</span></span><br><span class="line"><span class="ruby">    - git branch 新分支 [旧分支]    基于旧分支创建新分支</span></span><br><span class="line"><span class="ruby">    - git branch -d 分支名      删除分支</span></span><br><span class="line"><span class="ruby">    - git checkout 分支           切换到指定分支</span></span><br><span class="line"><span class="ruby">    - git merge 分支名            将指定分支合并到当前分支</span></span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 忽略提交，在工作区中编写一个.gitignore文件，在文件中记录不需要提交的目录和文件</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">- 如果克隆的时候出现了： unable to access <span class="string">'https://git.coding.net/landmark/php1702.git/'</span>: error setting certificate 解决方式：</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">    - Git config --global http.sslVerify <span class="literal">false</span> </span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">- 免密提交</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">    - <span class="number">1</span> 生成公钥对</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">        ~~~</span></span><br><span class="line"><span class="ruby">        cd   <span class="comment">#回到家目录</span></span></span><br><span class="line"><span class="ruby">        ssh-keygen -t rsa -C <span class="string">"自己的邮箱"</span></span></span><br><span class="line"><span class="ruby">        id_rsa 私钥  id_rsa.pub 公钥</span></span><br><span class="line"><span class="ruby">        ~~~</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">        </span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">    - <span class="number">2</span> 将公钥添加到码云服务器上</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">        ~~~</span></span><br><span class="line"><span class="ruby">        复制id_rsa.pub的内容</span></span><br><span class="line"><span class="ruby">        码云 ----&gt; 个人设置--&gt;ssh公钥，将复制的内容黏贴到“公钥内容”中</span></span><br><span class="line"><span class="ruby">        选中永久有效</span></span><br><span class="line"><span class="ruby">        添加</span></span><br><span class="line"><span class="ruby">        ~~~</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">    - <span class="number">3</span>.测试连接</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">        ~~~</span></span><br><span class="line"><span class="ruby">        ssh -T git@git.coding.net</span></span><br><span class="line"><span class="ruby">        </span></span><br><span class="line"><span class="ruby">        python@ubuntu<span class="symbol">:~/</span>.ssh$ ssh -T git@git.coding.net</span></span><br><span class="line"><span class="ruby">        <span class="symbol">Warning:</span> Permanently added the RSA host key <span class="keyword">for</span> IP address <span class="string">'123.59.83.79'</span> to the list of known hosts.</span></span><br><span class="line"><span class="ruby">        Coding 提示: Hello landmark, You<span class="string">'ve connected to Coding.net via SSH. This is a personal key.</span></span></span><br><span class="line"><span class="ruby">        landmark，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥 <span class="comment"># 表示通过</span></span></span><br><span class="line"><span class="ruby">        ~~~</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">        </span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">    - <span class="number">4</span> 使用项目的ssh地址，可以clone或init/remote add</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/SorrisiYi/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/SorrisiYi/assets/js
      
    
    </summary>
    
      <category term="git" scheme="https://addyzk.github.io/categories/git/"/>
    
    
      <category term="Git" scheme="https://addyzk.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="https://addyzk.github.io/2018/04/14/mysql/"/>
    <id>https://addyzk.github.io/2018/04/14/mysql/</id>
    <published>2018-04-14T13:45:14.000Z</published>
    <updated>2019-05-18T06:10:10.823Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/SorrisiYi/assets/css/APlayer.min.css"><script src="/SorrisiYi/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="一、数据库基本概念"><a href="#一、数据库基本概念" class="headerlink" title="一、数据库基本概念"></a>一、数据库基本概念</h2><p>数据的仓库:  </p><p>数据库服务器–&gt;数据库—&gt;表–&gt;记录-&gt;属性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="keyword">install</span> -y mysql-<span class="keyword">server</span> mysql-<span class="keyword">client</span></span><br></pre></td></tr></table></figure><h2 id="二、SQL"><a href="#二、SQL" class="headerlink" title="二、SQL"></a>二、SQL</h2><p>基本可分为：</p><ul><li>数据定义语言DDL (create、drop）</li><li>数据操作语言DML（insert、delete、update）</li><li>数据查询语言DQL（select、where、group by、order by 、limit）</li><li>数据控制语言DCL（grant、revoke）</li><li>事务处理语言TPL（commit、rollback）</li></ul><h2 id="三、操作数据库"><a href="#三、操作数据库" class="headerlink" title="三、操作数据库"></a>三、操作数据库</h2><p>连接mysql数据库的命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">命令：</span><br><span class="line">    mysql -h服务器地址 -u用户名  -p  <span class="comment">#不要再p后面直接跟密码</span></span><br><span class="line">    </span><br><span class="line">如果要远程连接mysql数据库，需要以下步骤：</span><br><span class="line">1.通过mysql -u用户名  -p登录mysql数据库</span><br><span class="line">2.创建一个新用户来远程连接</span><br><span class="line">     <span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'python'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123'</span></span><br><span class="line">     <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'python'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line">3.执行命令：<span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br><span class="line">4.退出mysql，到/etc/mysql/mysql.conf.d下，编辑mysqld.cnf</span><br><span class="line">找到 “bind-address = 127.0.0.1” , 这一行要注释掉，只需在前面加个<span class="comment">#</span></span><br><span class="line">5.重启mysql服务</span><br><span class="line">  sudo service mysql restart | <span class="keyword">start</span> | <span class="keyword">stop</span>  <span class="comment">#重启、启动、停止</span></span><br><span class="line">  或者：sudo /etc/init.d/mysql restart | <span class="keyword">start</span> | <span class="keyword">stop</span></span><br><span class="line"><span class="number">6.</span>如果开启了防火墙，请添加<span class="number">3306</span>端口</span><br><span class="line">  sudo ufw <span class="keyword">allow</span> <span class="number">3306</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#忘记mysql密码：</span></span><br><span class="line"><span class="number">1.</span>到/etc/mysql/mysqld.conf.d/,编辑mysqld.conf</span><br><span class="line">sudo vim mysqld.conf</span><br><span class="line"><span class="number">2.</span>到[mysqld]下</span><br><span class="line">添加：<span class="keyword">skip</span>-<span class="keyword">grant</span>-<span class="keyword">tables</span></span><br><span class="line">保存退出</span><br><span class="line"><span class="number">3.</span>重启mysql服务：</span><br><span class="line">   sudo service mysql restart | <span class="keyword">stop</span> | <span class="keyword">start</span></span><br></pre></td></tr></table></figure><p>数据库操作命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.查看库</span></span><br><span class="line">   <span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"><span class="comment">#2. 创建库</span></span><br><span class="line">   <span class="keyword">create</span> <span class="keyword">database</span> 数据库名 <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;<span class="comment"># 数据库名不要纯数字，不要用汉字</span></span><br><span class="line"><span class="comment">#3. 删除库</span></span><br><span class="line">   <span class="keyword">drop</span> <span class="keyword">database</span> 数据库名;</span><br><span class="line"><span class="comment">#4. 选中库</span></span><br><span class="line">   <span class="keyword">use</span> 数据库名;</span><br><span class="line"><span class="comment">#5. 查看表</span></span><br><span class="line">   <span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"><span class="comment">#6.查看数据库创建语句</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> 数据库名</span><br><span class="line"><span class="comment">#7.查看选中的数据库</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>()</span><br><span class="line"><span class="comment">#8 修改数据库字符集</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> student <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br></pre></td></tr></table></figure><p>注意</p><ul><li>每条命令结束必须使用; 或者 \g 结束</li><li>退出mysql使用命令quit或exit</li></ul><h2 id="四、数据库表"><a href="#四、数据库表" class="headerlink" title="四、数据库表"></a>四、数据库表</h2><p>创建表</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">create table [<span class="keyword">if</span> <span class="keyword">not</span> exists] 表名(</span><br><span class="line">   列名1  类型  [限制],</span><br><span class="line">   列名2  类型  [限制],</span><br><span class="line">   <span class="built_in">..</span>.</span><br><span class="line">   列名n  类型  [限制]  #最后一列没有逗号</span><br><span class="line">) [<span class="attribute">engine</span>=myisam | innodb][<span class="built_in"> default </span><span class="attribute">charset</span>=utf8];</span><br><span class="line"></span><br><span class="line">primary key 主键 不允许有重复值,不允许为空</span><br><span class="line">auto_increment 自增长，只对int型主键起作用</span><br><span class="line"></span><br><span class="line"><span class="comment">#复合主键</span></span><br><span class="line">mysql&gt; create table grade(</span><br><span class="line">    sid int ,</span><br><span class="line">    cid int,</span><br><span class="line">    score float,</span><br><span class="line">    primary key(sid,cid));</span><br></pre></td></tr></table></figure><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><p>查看表结构</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>查看建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><p>修改表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#修改字段类型</span><br><span class="line">   alter table 表名 modify 字段名 类型 [限制]</span><br><span class="line">#增加字段</span><br><span class="line">   alter table 表名  add [column] 字段名 类型 [限制];</span><br><span class="line">#删除字段</span><br><span class="line">   alter table 表名 drop [column] 字段名;</span><br><span class="line">修改字段名和类型</span><br><span class="line">   alter table 表名 change [column] 旧字段名 新字段名 类型 [限制];</span><br><span class="line">   </span><br><span class="line">#修改表名</span><br><span class="line">  alter table 表名 rename 新表名</span><br><span class="line">  alter table 表名 [engine=myisam] [<span class="keyword">default</span> charset=utf8];</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"> # 可以通过first、after指定插入位置</span><br><span class="line">  <span class="function">alter table student add sno <span class="title">varchar</span><span class="params">(<span class="number">3</span>)</span> <span class="keyword">not</span> null after sid</span>; <span class="comment">//在sid列后插入</span></span><br><span class="line">   alter table student add sid <span class="keyword">int</span> primary key auto_increment first;<span class="comment">//在第一列插入</span></span><br></pre></td></tr></table></figure><p>字段限制</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">primary key 不允许空值，唯一</span><br><span class="line"><span class="keyword">not</span>  <span class="literal">null</span> 非空</span><br><span class="line">unique 唯一</span><br><span class="line">default  缺省,默认值</span><br></pre></td></tr></table></figure><h2 id="五、数据类型"><a href="#五、数据类型" class="headerlink" title="五、数据类型"></a>五、数据类型</h2><p>数值型</p><ul><li>整型 能用整型尽量使用整型。包括int、smallint  tinyint</li><li>int(3) 或者 tinyint(2) :3或者2不会去限制你所存储数据的长度 ，只有在配合zerofill 零填充的时候 才有意义</li><li>浮点数  double 、decimal</li></ul><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">范围(有符号)</th><th style="text-align:center">范围(无符号)</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">tinyint</td><td style="text-align:center">1字节</td><td style="text-align:center">-128-127</td><td style="text-align:center">0,255</td><td style="text-align:center">最小整数</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4字节</td><td style="text-align:center">-2147483648-2147483647</td><td style="text-align:center"></td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">float(m,n)</td><td style="text-align:center">4-8字节</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">单精度浮点型(浮点数)</td></tr><tr><td style="text-align:center">double(m,n)</td><td style="text-align:center">8字节</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">双精度浮点型(浮点数)</td></tr><tr><td style="text-align:center">decimal(m,n)</td><td style="text-align:center">变长</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">浮点数(更加精确)</td></tr></tbody></table><p>字符型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">char</td><td style="text-align:center">0-255字节</td><td style="text-align:center">存储定长的字符串</td></tr><tr><td style="text-align:center">varchar</td><td style="text-align:center">0-65535字节</td><td style="text-align:center">变长字符串</td></tr><tr><td style="text-align:center">text</td><td style="text-align:center">0-65535字节</td><td style="text-align:center">长文本数据</td></tr><tr><td style="text-align:center">blob</td><td style="text-align:center">0-65535字节</td><td style="text-align:center">二进制的文本(不建议)</td></tr><tr><td style="text-align:center">enum(‘w’,’m’)</td><td style="text-align:center">65535个成员</td><td style="text-align:center">枚举</td></tr><tr><td style="text-align:center">set(‘w’,’m’)</td><td style="text-align:center">64个成员</td><td style="text-align:center">集合</td></tr></tbody></table><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><h5 id="1-char-和-varchar-的区别"><a href="#1-char-和-varchar-的区别" class="headerlink" title="(1) char 和 varchar 的区别:"></a>(1) char 和 varchar 的区别:</h5><ul><li>char的执行效率高于varchar ，varchar 相对于 char 节省存储空间</li><li>如果使用char 传入的数据的长度 小于指定的长度的时候  存储的实际长度 不够的会拿空格来填充</li><li>如果使用 varchar 传入的数据的长度 小于指定的长度的时候  存储的实际长度 为传进来的数据的长度</li></ul><ul><li><p>日期时间型</p><p>|   类型   | 大小 |                  范围                   |        格式         |      用途      |<br>| :——: | :–: | :————————————-: | :—————–: | :————: |<br>|   date   |  3   |          1000-01-01/9999-12-31          |     YYYY-MM-DD      |     日期值     |<br>|   time   |  3   |          -838:59:59/838:59:59           |      HH:MM:SS       |     时间值     |<br>|   year   |  4   |                1901/2155                |        YYYY         |     年份值     |<br>| datetime |  8   | 1000-01-01 00:00:00/9999-12-31 23:59:59 | YYYY-MM-DD HH:MM:SS | 混合日期和时间 |<br>|          |      |          ‘2018-05-4 10:53:00’           |                     |                |</p></li><li><p>枚举enum</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#是自定义类型，可以多选一,实际上存的值是1，2，3...</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> sex enum(<span class="string">'男'</span>,<span class="string">'女'</span>) <span class="keyword">default</span> <span class="string">'男'</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="keyword">name</span>,<span class="keyword">password</span>,sex) </span><br><span class="line"><span class="keyword">values</span>(<span class="string">'tom'</span>,<span class="string">'132'</span>,<span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">values</span>(<span class="string">'tom'</span>,<span class="string">'132'</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>集合set</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">类似复选框，可以存多个值</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> hobby <span class="keyword">set</span>(<span class="string">'看电影'</span>,<span class="string">'玩游戏'</span>,<span class="string">'敲代码'</span>,<span class="string">'烫头'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(uid,hobby) <span class="keyword">values</span>(<span class="number">22</span>,<span class="number">1</span>+<span class="number">2</span>+<span class="number">4</span>+<span class="number">8</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(uid,hobby) <span class="keyword">values</span>(<span class="number">22</span>,<span class="number">1</span>|<span class="number">2</span>|<span class="number">4</span>|<span class="number">8</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(uid,hobby) <span class="keyword">values</span>(<span class="number">22</span>,<span class="string">'看电影,玩游戏,敲代码'</span>) </span><br><span class="line"></span><br><span class="line"><span class="number">0001</span></span><br><span class="line"><span class="number">0010</span></span><br><span class="line"><span class="comment">-------</span></span><br><span class="line"><span class="number">0011</span></span><br></pre></td></tr></table></figure></li></ul><p>##六、数据操作</p><h3 id="1-insert"><a href="#1-insert" class="headerlink" title="1. insert"></a>1. insert</h3>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">写法一：<span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段<span class="number">1</span>，字段<span class="number">2.</span>..) <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2.</span>..);</span><br><span class="line"></span><br><span class="line">省略了字段列表，则按照建表时的字段顺序进行插入，每一列都要给值</span><br><span class="line">写法二：<span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2.</span>..);</span><br><span class="line">写法三：插入多个记录</span><br><span class="line">   <span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段<span class="number">1</span>，字段<span class="number">2.</span>..) </span><br><span class="line"> <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2.</span>..),</span><br><span class="line"> (值<span class="number">1</span>,值<span class="number">2.</span>..),</span><br><span class="line"> (值<span class="number">1</span>,值<span class="number">2.</span>..)....</span><br><span class="line">写法四： <span class="keyword">insert</span> <span class="keyword">into</span> 表名(<span class="keyword">name</span>,age,sex)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,age,sex <span class="keyword">from</span> stars;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> histroy_student <span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><h3 id="2-update"><a href="#2-update" class="headerlink" title="2.update"></a>2.update</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update 表名 set 字段<span class="number">1</span>=值<span class="number">1</span>,字段<span class="number">2</span>=值<span class="number">2.</span>.. where 条件  #不加where修改的是所有的记录</span><br></pre></td></tr></table></figure><h3 id="3-delete"><a href="#3-delete" class="headerlink" title="3. delete"></a>3. delete</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">删除表中的数据，自增主键的值不会重新开始</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件；<span class="comment">#如果不加条件，会删除表中所有数据,慎重使用</span></span><br><span class="line"></span><br><span class="line">清空表，自增主键的值重新开始编号</span><br><span class="line"><span class="keyword">truncate</span> </span><br><span class="line">   <span class="keyword">truncate</span> <span class="keyword">table</span> 表名,清空表中所有记录，等价于<span class="keyword">delete</span> <span class="keyword">from</span> 表名；</span><br><span class="line">   <span class="keyword">delete</span>和<span class="keyword">truncate</span>差别，<span class="keyword">truncate</span>后，表中自增主键值从<span class="number">1</span>开始</span><br></pre></td></tr></table></figure><h2 id="七、数据查询"><a href="#七、数据查询" class="headerlink" title="七、数据查询"></a>七、数据查询</h2><p>基本结构： select  字段名列表   from 表名</p><h3 id="1-基础查询"><a href="#1-基础查询" class="headerlink" title="1 基础查询"></a>1 基础查询</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select username,password  <span class="keyword">from</span> user;</span><br><span class="line">select usernname as 用户名, password as 密码  <span class="keyword">from</span><span class="built_in"> user; </span> #可以给字段起别名</span><br><span class="line">select *  <span class="keyword">from</span><span class="built_in"> user; </span>#查询所有字段，慎用，一般不建议使用，会导致无法优化sql语句</span><br><span class="line">select 2018,username,password  <span class="keyword">from</span><span class="built_in"> user; </span>#可以有常量，表达式</span><br><span class="line">select sname,2018-year(sbirthday) <span class="keyword">from</span> student; #year是mysql的内置函数</span><br><span class="line">select distinct username  <span class="keyword">from</span> <span class="built_in"> user; </span>#去除重复记录 distinct 针对查询结果去除重复记录，不针对字段</span><br></pre></td></tr></table></figure><p>###2 条件查询（where） </p><p>关系运算</p><p>关系运算符：&gt; 、 &gt;=、  &lt;、  &lt;=、  =、!=、&lt;&gt;、 between and</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select username,password <span class="keyword">from</span><span class="built_in"> user </span>where uid &lt;10</span><br><span class="line">select username,password <span class="keyword">from</span><span class="built_in"> user </span>where uid != 10</span><br><span class="line">select username,password <span class="keyword">from</span><span class="built_in"> user </span>where uid between 10 <span class="keyword">and</span> 20</span><br></pre></td></tr></table></figure><p>逻辑运算</p><p>逻辑运算符：and 、or、not</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select username,password <span class="keyword">from</span><span class="built_in"> user </span>where uid &lt; 100 <span class="keyword">and</span> uid &gt; 20;</span><br><span class="line">select username,password <span class="keyword">from</span><span class="built_in"> user </span>where uid &gt; 100 <span class="keyword">or</span> uid &lt; 20;</span><br></pre></td></tr></table></figure><p>集合运算</p><p>集合运算符：in、not in</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select username,password form<span class="built_in"> user </span>where uid <span class="keyword">in</span> (2,3,4)</span><br><span class="line">select username,password form<span class="built_in"> user </span>where uid <span class="keyword">not</span> <span class="keyword">in</span> (2,3,4)</span><br></pre></td></tr></table></figure><p>判空</p><p>判空运算：is  null、is not  null</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,password <span class="keyword">from</span><span class="built_in"> user </span>where username is <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>字符串的模糊查询(like)</p><p>通配符 _代表一个字符，%代表任意长度字符串</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">'王_'</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">'王%'</span>;</span><br></pre></td></tr></table></figure><h3 id="3-排序（order-by）"><a href="#3-排序（order-by）" class="headerlink" title="3. 排序（order by）"></a>3. 排序（order by）</h3><p> asc 升序(默认)、desc  降序、</p><pre><code>select * from user order by age asc;select * from user order by age desc;多字段排序       select name,age from php_user_history  order by age desc,name;# 如果在第一列上有相同的值，在具有相同的age的记录上再按name升序排列</code></pre><h3 id="4-限制结果集-limit"><a href="#4-限制结果集-limit" class="headerlink" title="4.限制结果集(limit)"></a>4.限制结果集(limit)</h3><p>limit n    #取前n条记录</p><p>limit  offset,n #从第offset条开始取，取n条</p><pre><code>select * from php_user_history limit 3;select * from php_user_history limit 4,2;注意结果集中记录从0开始数数，offset相对于0开始实现分页必须的技术点limit (page-1)*num,num</code></pre><h3 id="5-集合函数"><a href="#5-集合函数" class="headerlink" title="5.集合函数"></a>5.集合函数</h3><ul><li><p>count统计结果集中记录数</p></li><li><p>max 最大值</p></li><li><p>min  最小值</p></li><li><p>avg   平均值，只针对数值类型统计</p></li><li><p>sum 求和，只针对数值类型统计</p><p>注意，集合函数不能直接使用在where后面的条件里，但可以在子查询中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">num</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> age) <span class="keyword">num</span> <span class="keyword">from</span> <span class="keyword">user</span>; //去除重复记录</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sno = <span class="keyword">max</span>(sno);//错误</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-分组（group-by"><a href="#6-分组（group-by" class="headerlink" title="6.分组（group by)"></a>6.分组（group by)</h3><p>将结果集分组统计，规则：</p><ul><li>出现了groub by的查询语句，select后面的字段只能是集合函数和group by后面有的字段，不要跟其它字段</li><li>对分组进行过滤，可以使用having</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select uid, count(*) num <span class="keyword">from</span> php_forum<span class="built_in"> group </span>by uid;</span><br><span class="line">select uid,title, count(*) num <span class="keyword">from</span> forum<span class="built_in"> group </span>by uid having count(*) &gt;=2;</span><br><span class="line">having和where的区别：</span><br><span class="line">    where针对原始表进行过滤</span><br><span class="line">    having 是针对分组进行过滤</span><br></pre></td></tr></table></figure><h3 id="查询小结"><a href="#查询小结" class="headerlink" title="查询小结"></a>查询小结</h3><p>整体顺序不能颠倒</p><p>[]表示可选，可以有也可以没有</p><p>select 字段<br> from 表名<br>  [where 条件]<br>  [group by ]<br>  [having]<br>  [order by ]<br>  [limit]     </p><h2 id="八-字符集和存储引擎"><a href="#八-字符集和存储引擎" class="headerlink" title="八 字符集和存储引擎"></a>八 字符集和存储引擎</h2><p>修改字符集</p><p>为了能够正常显示中文，必须把数据库的字符集设置为utf8.</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="emphasis">'character%'</span>;  #查看字符集</span><br><span class="line"><span class="code">+--------------------------+</span>----------------------------+</span><br><span class="line">| Variable<span class="emphasis">_name            | Value                      |</span></span><br><span class="line"><span class="emphasis">+--------------------------+----------------------------+</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_client     | utf8                       |</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_connection | utf8                       |</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_database   | latin1                     |需要修改</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_filesystem | binary                     |</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_results    | utf8                       |</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_server     | latin1                     |需要修改</span></span><br><span class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_system     | utf8                       |</span></span><br><span class="line"><span class="emphasis">| character_</span>sets<span class="emphasis">_dir       | /usr/share/mysql/charsets/ |</span></span><br><span class="line"><span class="emphasis">+--------------------------+----------------------------+</span></span><br><span class="line"><span class="emphasis">8 rows in set (0.01 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">修改mysql的配置文件</span></span><br><span class="line"><span class="emphasis">cd /etc/mysql/mysql.conf.d</span></span><br><span class="line"><span class="emphasis">sudo cp mysql.cnf  mysql.cnf.bak</span></span><br><span class="line"><span class="emphasis">sudo vim mysql.cnf</span></span><br><span class="line"><span class="emphasis">在[mysqld]下增加一句：</span></span><br><span class="line"><span class="emphasis">character_</span>set<span class="emphasis">_server = utf8</span></span><br><span class="line"><span class="emphasis">保存并重启服务</span></span><br><span class="line"><span class="emphasis">sudo systemctl restart mysql.service  #重启服务</span></span><br></pre></td></tr></table></figure><p>数据库引擎</p><ul><li>常用的数据库引擎：myisam、innodb、archive、ndb、memory </li><li>myisam和innodb的区别<ul><li>myisam查询速度快，不支持事务、不支持外键、支持表锁</li><li>innodb增删改效率高，支持事务、支持外键，支持行锁</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/SorrisiYi/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/SorrisiYi/assets/js
      
    
    </summary>
    
      <category term="数据库" scheme="https://addyzk.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://addyzk.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>nginx、pyenv配置</title>
    <link href="https://addyzk.github.io/2017/05/17/nginx%E3%80%81pyenv%E9%85%8D%E7%BD%AE/"/>
    <id>https://addyzk.github.io/2017/05/17/nginx、pyenv配置/</id>
    <published>2017-05-17T12:42:20.000Z</published>
    <updated>2019-05-17T09:59:40.362Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/SorrisiYi/assets/css/APlayer.min.css"><script src="/SorrisiYi/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、开机启动"><a href="#一、开机启动" class="headerlink" title="一、开机启动"></a>一、开机启动</h2><p>可以设置开机启动有两个地方：第一，在/etc/init.d目录下，可以将服务放到这个目录下。第二是在/etc/init.d下的rc.local，可以将需要开机启动的程序写入这个文件。可以使用sysv-rc-conf命令进行设置和查看开机启动服务。</p><ul><li><p>在/etc/init.d/下新建一个脚本test，格式如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#要执行的命令</span></span><br><span class="line"><span class="keyword">exit</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>增加脚本可执行权限</p></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x <span class="built_in">test</span></span><br></pre></td></tr></table></figure><ul><li><p>设置开机启动</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">update</span>-rc.d <span class="keyword">test</span> <span class="keyword">defaults</span> </span><br><span class="line"><span class="comment">#90是优先级，越大优先级越低，越晚执行</span></span><br></pre></td></tr></table></figure></li><li><p>使用sysv-rc-conf命令设置运行级别</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#sysv-rc-conf默认没有安装，首先安装</span></span><br><span class="line">sudo apt-<span class="keyword">get</span> install sysv-rc-conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#执行命令sysv-rc-conf，用空格键选中或取消指定的运行级别。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#取消开机启动可以使用</span></span><br><span class="line">sudo update-rc.d -f 脚本名  remove</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、防火墙"><a href="#二、防火墙" class="headerlink" title="二、防火墙"></a>二、防火墙</h2><p>UFW或Uncomplicated Firewall是iptables的接口，旨在简化配置防火墙的过程。UFW默认安装在Ubuntu上。如果没有安装，你可以使用sudo apt-get install ufw 。</p><ul><li><p>ufw常见操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status                 <span class="comment">#查看状态和规则</span></span><br><span class="line">sudo ufw <span class="built_in">disable</span>                <span class="comment">#禁用</span></span><br><span class="line">sudo ufw <span class="built_in">enable</span>                 <span class="comment">#启用</span></span><br><span class="line">sudo ufw reset                  <span class="comment">#重置</span></span><br><span class="line">sudo ufw status numbered        <span class="comment">#显示规则编号</span></span><br></pre></td></tr></table></figure></li><li><p>设置默认策略</p><p>如果您刚刚开始使用防火墙，则首先要定义的规则是您的默认策略。这些规则控制如何处理未明确匹配任何其他规则的流量。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw<span class="built_in"> default </span>deny<span class="built_in"> incoming </span>  #拒绝所有传入连接</span><br><span class="line">sudo ufw<span class="built_in"> default </span>allow outgoing  #允许所有传出连接</span><br></pre></td></tr></table></figure></li><li><p>开启或禁用指定连接</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#允许连接</span></span><br><span class="line">sudo ufw allow 端口/服务</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许ssh远程连接</span></span><br><span class="line">sudo ufw allow ssh  <span class="comment">#或者sudo ufw allow 22/tcp  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#允许未加密的web访问</span></span><br><span class="line">sudo ufw allow <span class="keyword">http</span>  <span class="comment">#或sudo ufw allow 80</span></span><br><span class="line"><span class="comment">#允许加密的web访问</span></span><br><span class="line">sudo ufw allow <span class="keyword">https</span>  <span class="comment">#或sudo ufw allow 443</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#允许ftp访问</span></span><br><span class="line">sudo ufw allow <span class="keyword">ftp</span>  <span class="comment">#或sudo ufw allow 21/tcp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#允许远程mysql访问</span></span><br><span class="line">sudo ufw allow <span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#允许特定范围的端口</span></span><br><span class="line">sudo ufw allow <span class="number">6000</span>:<span class="number">6007</span>/tcp <span class="comment">#允许使用端口6000 - 6007 X11连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#允许特定ip地址</span></span><br><span class="line">sudo ufw allow <span class="built_in">from</span> <span class="number">15.15</span><span class="number">.15</span><span class="number">.51</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#允许特定子网</span></span><br><span class="line">sudo ufw allow <span class="built_in">from</span> <span class="number">15.15</span><span class="number">.15</span><span class="number">.0</span>/<span class="number">24</span>  <span class="comment">#允许所有的IP地址范围从15.15.15.1到15.15.15.254</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拒绝连接</span></span><br><span class="line">sudo ufw deny <span class="keyword">http</span></span><br><span class="line">sudo ufw deny <span class="built_in">from</span> <span class="number">15.15</span><span class="number">.15</span><span class="number">.51</span></span><br></pre></td></tr></table></figure></li><li><p>删除规则</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status numbered <span class="comment">#先查看编号</span></span><br><span class="line">sudo ufw <span class="keyword">delete</span> <span class="number">2</span>  <span class="comment">#再按编号删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按实际规则</span></span><br><span class="line">sudo ufw <span class="keyword">delete</span> <span class="keyword">allow</span> <span class="keyword">http</span></span><br><span class="line">sudo ufw <span class="keyword">delete</span> <span class="keyword">allow</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="三、nginx环境搭建"><a href="#三、nginx环境搭建" class="headerlink" title="三、nginx环境搭建"></a>三、nginx环境搭建</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">安装nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 更新软件列表</span></span><br><span class="line"></span><br><span class="line">sudo apt-<span class="builtin-name">get</span> update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 安装</span></span><br><span class="line"></span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 启动服务</span></span><br><span class="line"></span><br><span class="line">sudo  /etc/init.d/ngin start  # start | restart | stop</span><br><span class="line">或</span><br><span class="line">service nginx start | restart | stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置虚拟站点</span></span><br><span class="line"></span><br><span class="line">cd /etc/nginx/sites-available</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.复制虚拟站点配置模板，生成自己虚拟站点的配置文件</span></span><br><span class="line"></span><br><span class="line">sudo cp<span class="built_in"> default </span>www.blog.com.conf  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 5 编辑模板</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------以下为配置内容-------------------</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80; #监听端口</span><br></pre></td></tr></table></figure><p>   #站点的根目录<br>    root /var/www/html/<a href="http://www.blog.com" target="_blank" rel="noopener">www.blog.com</a>;</p><pre><code># Add index.php to the list if you are using PHP#网站默认首页打开顺序index index.html index.htm; #站点名称，可以有多个名称，中间用空格隔开server_name www.blog.com blog.com; </code></pre><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># ------------------到此结束------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 这个模板比较简单，如果有复杂的要求，请以此为基础进行改进</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 6 保存退出</span></span><br><span class="line"></span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line"><span class="meta"># 7 切换到sites-enabled目录下，创建软连接</span></span><br><span class="line"></span><br><span class="line">cd ../sites-enabled</span><br><span class="line">sudo ln -s <span class="meta-keyword">/etc/</span>nginx<span class="meta-keyword">/sites-available/</span>www.blog.com.con   www.blog.com.conf</span><br><span class="line"></span><br><span class="line"><span class="meta"># 8 重启nginx服务</span></span><br><span class="line"></span><br><span class="line">sudo service nginx restart  (start/stop)</span><br><span class="line">或者</span><br><span class="line">sudo <span class="meta-keyword">/etc/</span>init.d/nginx restart</span><br><span class="line"></span><br><span class="line"><span class="meta"># 8 切换到站点根目录(根据你自己的设定进行)，我假定站点根目录是/var/www</span></span><br><span class="line"></span><br><span class="line">cd <span class="meta-keyword">/var/</span>www</span><br><span class="line">sudo chmod -R <span class="number">755</span> blog</span><br><span class="line"></span><br><span class="line"><span class="meta"># 编辑index.html</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;head&gt;</span></span><br><span class="line"><span class="params">&lt;meta charset='utf<span class="number">-8</span>'&gt;</span></span><br><span class="line"><span class="params">&lt;title&gt;</span>疯狂程序员的博客<span class="params">&lt;/title&gt;</span></span><br><span class="line"><span class="params">&lt;/head&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;body&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;h1&gt;</span>疯狂的程序员<span class="params">&lt;/h1&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;/body&gt;</span></span><br><span class="line"><span class="params">&lt;/html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 保存退出</span></span><br><span class="line"></span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line"><span class="meta"># 9 切换到windows系统下，编辑C:\Windows\System32\drivers\etc\hosts文件，在末尾增加：</span></span><br><span class="line"></span><br><span class="line">ip为你虚拟机的ip地址</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">192<span class="selector-class">.168</span><span class="selector-class">.48</span><span class="selector-class">.3</span>  <span class="selector-tag">www</span><span class="selector-class">.blog</span><span class="selector-class">.com</span>`   </span><br><span class="line"></span><br><span class="line">`10 在<span class="selector-tag">windows</span>系统下浏览器里输入 :  <span class="selector-tag">www</span><span class="selector-class">.blog</span><span class="selector-class">.com</span>`</span><br><span class="line"></span><br><span class="line">`看看是否是你的页面`</span><br></pre></td></tr></table></figure><h2 id="四、下载"><a href="#四、下载" class="headerlink" title="四、下载"></a>四、下载</h2><ul><li><p>wget  wget命令用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用wget -c重新启动下载中断的文件，对于我们下载大文件时突然由于网络等原因中断非常有帮助，我们可以继续接着下载而不是重新下载一个文件。需要继续中断的下载时可以使用-c参数。</span></span><br><span class="line">sudo wget -c <span class="symbol">http:</span>/<span class="regexp">/mirrors.sohu.com/python</span><span class="regexp">/3.6.4/</span>Python-<span class="number">3.6</span>.<span class="number">4</span>.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="comment">#-P 将下载文件存到指定目录</span></span><br><span class="line">sudo wget -c <span class="symbol">http:</span>/<span class="regexp">/mirrors.sohu.com/python</span><span class="regexp">/3.6.4/</span>Python-<span class="number">3.6</span>.<span class="number">4</span>.tar.xz -P ~<span class="regexp">/  #下载保存到家目录</span></span><br></pre></td></tr></table></figure></li><li><p>curl</p><p>curl命令是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O http:<span class="regexp">//mi</span>rrors.sohu.com<span class="regexp">/python/</span><span class="number">3.6</span>.<span class="number">4</span><span class="regexp">/Python-3.6.4.tar.xz</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="五、python开发环境配置"><a href="#五、python开发环境配置" class="headerlink" title="五、python开发环境配置"></a>五、python开发环境配置</h2><p>Python 2和Python 3之间存在着较大的差异，并且，由于各种原因导致了Python 2和Python 3的长期共存。在实际工作过程中，我们可能会同时用到Python 2和Python 3，因此，也需要经常在Python 2和Python 3之间进行来回切换。这就需要对python的版本进行管理，除此之外还需要对不同的软件包进行管理。大部分情况下，对于开源的库我们使用最新版本即可。但是，有时候可能需要对相同的Python版本，在不同的项目中使用不同版本的软件包。</p><p>在这里，我们要使用两个工具：pyenv和virtualenv。前者用于管理不同的Python版本，后者用于管理不同的工作环境。有了这两个工具，Python相关的版本问题将不再是问题。</p><h3 id="5-1-pyenv"><a href="#5-1-pyenv" class="headerlink" title="5.1 pyenv"></a>5.1 pyenv</h3><p>pyenv是一个Python版本管理工具，它能够进行全局的Python版本切换，也可以为单个项目提供对应的Python版本。使用pyenv以后，可以在服务器上安装多个不同的Python版本，也可以安装不同的Python实现。不同Python版本之间的切换也非常简单。pyenv官方地址<a href="https://github.com/pyenv/pyenv-installer" target="_blank" rel="noopener">https://github.com/pyenv/pyenv-installer</a></p><ul><li>安装pyenv</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 安装pyenv，在命令行下键入：</span></span><br><span class="line">$ curl -L https:<span class="string">//github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer</span> | bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认安装到当前用户的工作目录下的.pyenv，我们可以查看一下</span></span><br><span class="line">$ <span class="keyword">cd</span> ~</span><br><span class="line">$ <span class="keyword">ls</span> -la</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果安装过git，也可以使用以下安装方式安装</span></span><br><span class="line"> $ git clone https:<span class="string">//github.com/pyenv/pyenv.git</span> ~<span class="string">/.pyenv</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 将安装路径写入~/.bashrc</span></span><br><span class="line">将以下三条语句写入 ~<span class="string">/.bashrc</span>  </span><br><span class="line">export PATH=<span class="string">"/home/zhu/.pyenv/bin:$PATH"</span></span><br><span class="line">eval <span class="string">"$(pyenv init -)"</span></span><br><span class="line">eval <span class="string">"$(pyenv virtualenv-init -)"</span></span><br><span class="line"></span><br><span class="line">$ source  ~<span class="string">/.bashrc</span>  <span class="comment">#配置立刻生效</span></span><br><span class="line"></span><br><span class="line">$ <span class="keyword">echo</span> $PATH</span><br><span class="line"><span class="comment">#如果路径第一个结尾是shims则表示成功</span></span><br><span class="line"><span class="string">/home/python/.pyenv/plugins/pyenv-virtualenv/shims</span>:<span class="string">/home/python/.pyenv/shims</span>:<span class="string">/home/python/.pyenv/bin</span>:<span class="string">/home/python/bin</span>:<span class="string">/home/python/.local/bin</span>:<span class="string">/usr/local/sbin</span>:<span class="string">/usr/local/bin</span>:<span class="string">/usr/sbin</span>:<span class="string">/usr/bin</span>:<span class="string">/sbin</span>:<span class="string">/bin</span>:<span class="string">/usr/games</span>:<span class="string">/usr/local/games</span>:<span class="string">/snap/bin</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以将上面三条命令写入到~/.barsh_profile，然后重启一下shell</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3 更新一下</span></span><br><span class="line">$ pyenv update</span><br></pre></td></tr></table></figure><ul><li><p>使用pyenv</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.查看pyenv当前支持哪些Python版本</span></span><br><span class="line">python@ubuntu:~$ pyenv install --list</span><br><span class="line">Available versions:</span><br><span class="line">  2.1.3</span><br><span class="line">  2.2.3</span><br><span class="line">  2.3.7</span><br><span class="line">  <span class="built_in">..</span>.</span><br><span class="line">  </span><br><span class="line"><span class="comment">#2.列出pyenv中所有可用的python版本</span></span><br><span class="line">python@ubuntu:~$ pyenv versions</span><br><span class="line">  system</span><br><span class="line">  3.5.4</span><br><span class="line">* 3.6.4 (<span class="builtin-name">set</span> by /home/python/.pyenv/version)  # *表示当前使用的3.6.4版本</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.选择指定的python版本</span></span><br><span class="line">python@ubuntu:~$ pyenv global 3.5.4  #设置指定的版本</span><br><span class="line">python@ubuntu:~$ python  </span><br><span class="line">Python 3.5.4 (default, Mar 29 2018, 11:02:03)  #已经切换到了3.5.4</span><br><span class="line">[GCC 5.4.0 20160609] on linux</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">切换Python版本以后，与版本相关的依赖也会一起切换。因此，我们不用担心不同的版本在系统中是否会相互干扰。</span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 删除指定python版本</span></span><br><span class="line">python@ubuntu:~$ pyenv uninstall 3.5.4</span><br><span class="line">pyenv: <span class="builtin-name">remove</span> /home/python/.pyenv/versions/3.5.4? y</span><br><span class="line">python@ubuntu:~$ pyenv versions</span><br><span class="line">  system</span><br><span class="line">* 3.6.4 (<span class="builtin-name">set</span> by /home/python/.pyenv/version)</span><br></pre></td></tr></table></figure></li><li><p>安装python</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1.在安装python之前，我们必须要安装python所需要的依赖包，这个必须要安装，安装会失败的：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libc6-dev gcc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">2. 安装python</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pyenv install 3.6.4 -v  <span class="comment">#-v 以日志模式显示安装过程</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">因为pyenv会自动到github上下载，速度超慢，所以一般会选择使用curl或者wget下载到~/.pyenv/cache下，然后再用pyenv安装，下面是可选的安装模式</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/.pyenv</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir cache</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget -c http://mirrors.sohu.com/python/3.6.4/Python-3.6.4.tar.xz -P  ~/.pyenv/cache/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pyenv install 3.6.4 -v</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">3.更新pyenv数据库</span></span><br><span class="line"><span class="meta"> $</span><span class="bash"> pyenv <span class="built_in">rehash</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">4.列出所安装的python版本</span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> pyenv versions</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">5.切换python版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pyenv  global 3.6.4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">6.验证版本</span></span><br><span class="line"><span class="meta"> $</span><span class="bash"> python</span></span><br></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>使用pyenv管理python，必须是用pyenv安装的python才行，系统以前有的，需要重新用pyenv安装</li><li>使用pip安装第三方模块时会安装到~/.pyenv/versions/xxx下，不会和系统模块发生冲突；</li><li>使用pip安装模块后，可能需要执行pyenv rehash更新数据库。</li></ul></li></ul><h3 id="5-2-virtualenv"><a href="#5-2-virtualenv" class="headerlink" title="5.2 virtualenv"></a>5.2 virtualenv</h3><p>virtualenv本身是一个独立的项目，用以隔离不同项目的工作环境。例如，项目A和项目B都是使用Python 2.7.13，但是，项目A需要使用Flask 0.8版本，项目B需要使用Flask 0.9版本。我们只要组合pyenv和virtualenv这两个工具，就能够构造Python和第三方库的任意版本组合，拥有了很好的灵活性，也避免了项目之间的相互干扰。</p><p>virtualenv本身是一个独立的工具，用户可以不使用pyenv单独使用virtualenv。但是，如果你使用了pyenv，就需要安装pyenv-virtualenv插件而不是virtualenv软件来使用virtualenv的功能。</p><p>项目主页：<a href="https://github.com/yyuu/pyenv-virtualenv" target="_blank" rel="noopener">https://github.com/yyuu/pyenv-virtualenv</a></p><ul><li><p>安装virtualenv（可选）</p><p>如果是python3以上，安装完pyth就已经安装了virtualenv，就不用安装了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">$ pip <span class="keyword">install</span> virtualenv</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者，如果提示版本不匹配，可以使用--upgrade参数</span></span><br><span class="line">$ sudo pip <span class="keyword">install</span> <span class="comment">--upgrade virtualenv</span></span><br></pre></td></tr></table></figure></li><li><p>使用virtualenv创建项目的虚拟环境</p></li></ul><p><strong>一个项目创建一个virtualenv的虚拟环境</strong>，在这个环境中，可以用pip安装项目所需的库，不会影响其他项目。切记一个项目一个虚拟环境，否则可能会发生莫名的错误。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.首先创建项目目录</span></span><br><span class="line">$ sudo mkdir -p myproject/blog</span><br><span class="line">cd myproject/blog</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.创建项目的虚拟环境</span></span><br><span class="line"><span class="comment">#用法：pyenv virtualenv python版本号 虚拟环境名</span></span><br><span class="line">$ pyenv virtualenv 3.6.4 env36   #注意版本号必须是已经安装的，否则会报错</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.切换到虚拟环境 </span></span><br><span class="line">python@ubuntu:/myproject/blog$ pyenv activate env36</span><br><span class="line"></span><br><span class="line">pyenv-virtualenv: prompt changing will be removed <span class="keyword">from</span> future release. configure `<span class="builtin-name">export</span> <span class="attribute">PYENV_VIRTUALENV_DISABLE_PROMPT</span>=1' <span class="keyword">to</span> simulate the behavior.</span><br><span class="line"></span><br><span class="line">(env36) python@ubuntu:/myproject/blog$  # (env36)表示该项目处于虚拟环境中</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">(env36) python@ubuntu:/myproject/blog$ python</span><br><span class="line">Python 3.6.4 (default, Mar 29 2018, 10:33:37) </span><br><span class="line">[GCC 5.4.0 20160609] on linux</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 切出虚拟环境</span></span><br><span class="line">(env36) python@ubuntu:/myproject/blog$ pyenv deactivate env36</span><br></pre></td></tr></table></figure><p>1、安装  virtualenvwrapper</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> virtualenv</span><br><span class="line"></span><br><span class="line">pip3 <span class="keyword">install</span> virtualenvwrapper</span><br></pre></td></tr></table></figure><p> 2、新建虚拟环境文件夹</p><figure class="highlight plain"><figcaption><span>y</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/PyEnv</span><br></pre></td></tr></table></figure><p>3、设置环境变量</p><pre><code>在使用virtualenvwrapper之前，要运行virtualenvwrapper.sh文件，需要设置环境变量， vim进入~/.bash_profile，插入</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> WORKON_HOME=~/PyEnv</span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh     //virtualenvwrapper.sh   所在目录</span><br></pre></td></tr></table></figure><p>4、执行3步骤，若提示</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">If Python could<span class="built_in"> not </span>import the module virtualenvwrapper.hook_loader,</span><br><span class="line">check that virtualenvwrapper has been installed for</span><br><span class="line">VIRTUALENVWRAPPER_PYTHON=/usr/bin/python<span class="built_in"> and </span>that PATH is</span><br><span class="line">set properly.</span><br></pre></td></tr></table></figure><p>在bash_profile中 加入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export VIRTUALENVWRAPPER_PYTHON=<span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>python3   <span class="regexp">//</span>python3   所在目录</span><br></pre></td></tr></table></figure><p>5、至此mkvirtualenv、workon命令即可使用</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>列出所有虚拟环境 workon</span><br><span class="line"><span class="bullet">* </span>创建基本环境 mkvirtualenv [环境名]</span><br><span class="line"><span class="bullet">* </span>激活环境 workon [环境名]</span><br><span class="line"><span class="bullet">* </span>退出环境 deactivate [环境名]</span><br><span class="line"><span class="bullet">* </span>删除环境 rmvirtualenv [环境名]</span><br></pre></td></tr></table></figure><ul><li>使用pip下载库</li></ul><p>使用pip下载，会从国外的网站下载，速度超慢，所以要切换pip到国内的镜像源，一般会用psm切换pip的源</p><ul><li><p>1.安装一个软件psm</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(bbs36)python<span class="variable">@ubuntu</span><span class="symbol">:/myproject/blog</span><span class="variable">$ </span>pip install psm</span><br><span class="line">[sudo] python 的密码： </span><br><span class="line">正在读取软件包列表... 完成</span><br><span class="line">正在分析软件包的依赖关系树       </span><br><span class="line">正在读取状态信息... 完成       </span><br><span class="line"><span class="symbol">E:</span> 无法定位软件包 psm</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>2.psm的使用<br>以下操作需要在虚拟环境外进行，选择好镜像源后在进入虚拟环境</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.查看列出pip的镜像源</span></span><br><span class="line">(bbs36)python@ubuntu:/myproject/blog$ psm ls</span><br><span class="line"></span><br><span class="line">pypi  https://pypi.python.org/simple/</span><br><span class="line">douban  http://pypi.douban.com/simple/</span><br><span class="line">aliyun  http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前的镜像源</span></span><br><span class="line">(bbs36)python@ubuntu:/myproject/blog$ psm <span class="keyword">show</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Current</span> <span class="keyword">source</span> <span class="keyword">is</span> douban</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.选择指定的镜像源</span></span><br><span class="line"></span><br><span class="line">(bbs36)python@ubuntu:/myproject/blog$ psm <span class="keyword">use</span> douban</span><br><span class="line"></span><br><span class="line"><span class="keyword">Source</span> <span class="keyword">is</span> <span class="keyword">changed</span> <span class="keyword">to</span> douban.</span><br><span class="line"></span><br><span class="line"><span class="comment">#3 使用pip下载库</span></span><br><span class="line">(bbs36) python@ubuntu:/myproject/blog$ pip <span class="keyword">install</span> pymysql</span><br></pre></td></tr></table></figure></li></ul><h2 id="六、pycharm和虚拟开发环境结合"><a href="#六、pycharm和虚拟开发环境结合" class="headerlink" title="六、pycharm和虚拟开发环境结合"></a>六、pycharm和虚拟开发环境结合</h2><p>1.创建一个新的工程，file-setting-&gt;project  interpreter ，点击右边的…按钮–&gt;show all</p><p><img src="QQ截图20180913160545.png" alt="QQ截图20180913160545"></p><p><img src="env.png" alt="env"></p><p>点击“+”，然后，在下图中选择Existing interperter后面的….</p><p><img src="QQ截图20180913155916.png" alt="QQ截图20180913155916"></p><ol start="2"><li><p>打开virtual enviroment   选择已经存在的虚拟开发环境. 在你的家目录下–&gt;.pyenv-&gt;versions –&gt; 你的虚拟开发环境名称–&gt;bin  选python</p><p><img src="QQ截图20180913160058.png" alt="QQ截图20180913160058"></p><p><img src="QQ截图20180913160400.png" alt="QQ截图20180913160400"></p><p><img src="QQ截图20180913160416.png" alt="QQ截图20180913160416"></p></li></ol><p>对已经存在的工程来说，file-&gt;settingd-&gt; project xxx –&gt;project interpreter  选择已经存在的虚拟开发环境i</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/SorrisiYi/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/SorrisiYi/assets/js
      
    
    </summary>
    
      <category term="配置" scheme="https://addyzk.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="环境配置" scheme="https://addyzk.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>my</title>
    <link href="https://addyzk.github.io/2016/05/17/my/"/>
    <id>https://addyzk.github.io/2016/05/17/my/</id>
    <published>2016-05-17T06:50:15.000Z</published>
    <updated>2019-05-18T06:10:20.484Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/SorrisiYi/assets/css/APlayer.min.css"><script src="/SorrisiYi/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当赤道划过雪花，你在哪里？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/SorrisiYi/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/SorrisiYi/assets/js
      
    
    </summary>
    
      <category term="随笔" scheme="https://addyzk.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://addyzk.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
